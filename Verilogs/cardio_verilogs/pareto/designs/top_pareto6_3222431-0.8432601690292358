//weights: [[[0, 1, 0, 1, 0, 0, -2, -1, 1, -2, 1, 1, 0, 0, 0, 0, 1, 1, 0, -2, 0], [1, -2, 1, -2, 0, 0, 1, 1, -2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, -2, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, -2, 0, 1, 0, -1, -2, -2, 1, 0]], [[1, -2, -2], [0, 1, 0], [-2, 0, 0]]]
//intercepts: [[1, 1, 1], [7, -8, -4]]
module top (inp, out);
input [62:0] inp;
output [1:0] out;

// layer: 0 - neuron: 0
    //weight 0 : skip
    //weight 1 : 1'b1
    wire [3:0] n_0_0_po_1;
    assign n_0_0_po_1 = $unsigned(inp[5:3]) * $unsigned(1'b1);

    //weight 0 : skip
    //weight 1 : 1'b1
    wire [3:0] n_0_0_po_3;
    assign n_0_0_po_3 = $unsigned(inp[11:9]) * $unsigned(1'b1);

    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-2) : 2'b10
    wire [4:0] n_0_0_po_6;
    assign n_0_0_po_6 = $unsigned(inp[20:18]) * $unsigned(2'b10);

    //weight abs(-1) : 1'b1
    wire [3:0] n_0_0_po_7;
    assign n_0_0_po_7 = $unsigned(inp[23:21]) * $unsigned(1'b1);

    //weight 1 : 1'b1
    wire [3:0] n_0_0_po_8;
    assign n_0_0_po_8 = $unsigned(inp[26:24]) * $unsigned(1'b1);

    //weight abs(-2) : 2'b10
    wire [4:0] n_0_0_po_9;
    assign n_0_0_po_9 = $unsigned(inp[29:27]) * $unsigned(2'b10);

    //weight 1 : 1'b1
    wire [3:0] n_0_0_po_10;
    assign n_0_0_po_10 = $unsigned(inp[32:30]) * $unsigned(1'b1);

    //weight 1 : 1'b1
    wire [3:0] n_0_0_po_11;
    assign n_0_0_po_11 = $unsigned(inp[35:33]) * $unsigned(1'b1);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 1 : 1'b1
    wire [3:0] n_0_0_po_16;
    assign n_0_0_po_16 = $unsigned(inp[50:48]) * $unsigned(1'b1);

    //weight 1 : 1'b1
    wire [3:0] n_0_0_po_17;
    assign n_0_0_po_17 = $unsigned(inp[53:51]) * $unsigned(1'b1);

    //weight 0 : skip
    //weight abs(-2) : 2'b10
    wire [4:0] n_0_0_po_19;
    assign n_0_0_po_19 = $unsigned(inp[59:57]) * $unsigned(2'b10);

    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [6:0] n_0_0_sum_pos;
    assign n_0_0_sum_pos = 4'b1000 + n_0_0_po_1 + n_0_0_po_3 + n_0_0_po_8 + n_0_0_po_10 + n_0_0_po_11 + n_0_0_po_16 + n_0_0_po_17;
    wire [6:0] n_0_0_sum_neg;
    assign n_0_0_sum_neg = n_0_0_po_6 + n_0_0_po_7 + n_0_0_po_9 + n_0_0_po_19;
    wire signed [7:0] n_0_0_sum;
    assign n_0_0_sum = $signed({1'b0,n_0_0_sum_pos}) - $signed({1'b0,n_0_0_sum_neg});

    //relu
    wire [2:0] n_0_0, n_0_0_qrelu;
    DW01_satrnd #(7, 4, 2) USR_n_0_0 ( .din(n_0_0_sum[6:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_0_qrelu));
    assign n_0_0 = (n_0_0_sum<0) ? $unsigned({3{1'b0}}) : $unsigned(n_0_0_qrelu);

// layer: 0 - neuron: 1
    //weight 1 : 1'b1
    wire [3:0] n_0_1_po_0;
    assign n_0_1_po_0 = $unsigned(inp[2:0]) * $unsigned(1'b1);

    //weight abs(-2) : 2'b10
    wire [4:0] n_0_1_po_1;
    assign n_0_1_po_1 = $unsigned(inp[5:3]) * $unsigned(2'b10);

    //weight 1 : 1'b1
    wire [3:0] n_0_1_po_2;
    assign n_0_1_po_2 = $unsigned(inp[8:6]) * $unsigned(1'b1);

    //weight abs(-2) : 2'b10
    wire [4:0] n_0_1_po_3;
    assign n_0_1_po_3 = $unsigned(inp[11:9]) * $unsigned(2'b10);

    //weight 0 : skip
    //weight 0 : skip
    //weight 1 : 1'b1
    wire [3:0] n_0_1_po_6;
    assign n_0_1_po_6 = $unsigned(inp[20:18]) * $unsigned(1'b1);

    //weight 1 : 1'b1
    wire [3:0] n_0_1_po_7;
    //merging with node 0
    assign n_0_1_po_7 = n_0_0_po_7;

    //weight abs(-2) : 2'b10
    wire [4:0] n_0_1_po_8;
    assign n_0_1_po_8 = $unsigned(inp[26:24]) * $unsigned(2'b10);

    //weight 1 : 1'b1
    wire [3:0] n_0_1_po_9;
    assign n_0_1_po_9 = $unsigned(inp[29:27]) * $unsigned(1'b1);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 1 : 1'b1
    wire [3:0] n_0_1_po_13;
    assign n_0_1_po_13 = $unsigned(inp[41:39]) * $unsigned(1'b1);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [6:0] n_0_1_sum_pos;
    assign n_0_1_sum_pos = 4'b1000 + n_0_1_po_0 + n_0_1_po_2 + n_0_1_po_6 + n_0_1_po_7 + n_0_1_po_9 + n_0_1_po_13;
    wire [6:0] n_0_1_sum_neg;
    assign n_0_1_sum_neg = n_0_1_po_1 + n_0_1_po_3 + n_0_1_po_8;
    wire signed [7:0] n_0_1_sum;
    assign n_0_1_sum = $signed({1'b0,n_0_1_sum_pos}) - $signed({1'b0,n_0_1_sum_neg});

    //relu
    wire [2:0] n_0_1, n_0_1_qrelu;
    DW01_satrnd #(7, 4, 2) USR_n_0_1 ( .din(n_0_1_sum[6:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_1_qrelu));
    assign n_0_1 = (n_0_1_sum<0) ? $unsigned({3{1'b0}}) : $unsigned(n_0_1_qrelu);

// layer: 0 - neuron: 2
    //weight 0 : skip
    //weight abs(-2) : 2'b10
    wire [4:0] n_0_2_po_1;
    //merging with node 1
    assign n_0_2_po_1 = n_0_1_po_1;

    //weight 0 : skip
    //weight 1 : 1'b1
    wire [3:0] n_0_2_po_3;
    //merging with node 0
    assign n_0_2_po_3 = n_0_0_po_3;

    //weight 1 : 1'b1
    wire [3:0] n_0_2_po_4;
    assign n_0_2_po_4 = $unsigned(inp[14:12]) * $unsigned(1'b1);

    //weight 0 : skip
    //weight 1 : 1'b1
    wire [3:0] n_0_2_po_6;
    //merging with node 1
    assign n_0_2_po_6 = n_0_1_po_6;

    //weight 1 : 1'b1
    wire [3:0] n_0_2_po_7;
    //merging with node 0
    assign n_0_2_po_7 = n_0_0_po_7;

    //weight 1 : 1'b1
    wire [3:0] n_0_2_po_8;
    //merging with node 0
    assign n_0_2_po_8 = n_0_0_po_8;

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-2) : 2'b10
    wire [4:0] n_0_2_po_12;
    assign n_0_2_po_12 = $unsigned(inp[38:36]) * $unsigned(2'b10);

    //weight 0 : skip
    //weight 1 : 1'b1
    wire [3:0] n_0_2_po_14;
    assign n_0_2_po_14 = $unsigned(inp[44:42]) * $unsigned(1'b1);

    //weight 0 : skip
    //weight abs(-1) : 1'b1
    wire [3:0] n_0_2_po_16;
    //merging with node 0
    assign n_0_2_po_16 = n_0_0_po_16;

    //weight abs(-2) : 2'b10
    wire [4:0] n_0_2_po_17;
    assign n_0_2_po_17 = $unsigned(inp[53:51]) * $unsigned(2'b10);

    //weight abs(-2) : 2'b10
    wire [4:0] n_0_2_po_18;
    assign n_0_2_po_18 = $unsigned(inp[56:54]) * $unsigned(2'b10);

    //weight 1 : 1'b1
    wire [3:0] n_0_2_po_19;
    assign n_0_2_po_19 = $unsigned(inp[59:57]) * $unsigned(1'b1);

    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [7:0] n_0_2_sum_pos;
    assign n_0_2_sum_pos = 4'b1000 + n_0_2_po_3 + n_0_2_po_4 + n_0_2_po_6 + n_0_2_po_7 + n_0_2_po_8 + n_0_2_po_14 + n_0_2_po_19;
    wire [7:0] n_0_2_sum_neg;
    assign n_0_2_sum_neg = n_0_2_po_1 + n_0_2_po_12 + n_0_2_po_16 + n_0_2_po_17 + n_0_2_po_18;
    wire signed [8:0] n_0_2_sum;
    assign n_0_2_sum = $signed({1'b0,n_0_2_sum_pos}) - $signed({1'b0,n_0_2_sum_neg});

    //relu
    wire [2:0] n_0_2, n_0_2_qrelu;
    DW01_satrnd #(8, 4, 2) USR_n_0_2 ( .din(n_0_2_sum[7:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_2_qrelu));
    assign n_0_2 = (n_0_2_sum<0) ? $unsigned({3{1'b0}}) : $unsigned(n_0_2_qrelu);

// layer: 1 - neuron: 0
    //weight 1 : 1'b1
    wire [3:0] n_1_0_po_0;
    assign n_1_0_po_0 = $unsigned(n_0_0) * $unsigned(1'b1);

    //weight abs(-2) : 2'b10
    wire [4:0] n_1_0_po_1;
    assign n_1_0_po_1 = $unsigned(n_0_1) * $unsigned(2'b10);

    //weight abs(-2) : 2'b10
    wire [4:0] n_1_0_po_2;
    assign n_1_0_po_2 = $unsigned(n_0_2) * $unsigned(2'b10);

    //accumulate positive/negative subproducts
    wire [5:0] n_1_0_sum_pos;
    assign n_1_0_sum_pos = 3'b111 + n_1_0_po_0;
    wire [5:0] n_1_0_sum_neg;
    assign n_1_0_sum_neg = n_1_0_po_1 + n_1_0_po_2;
    wire signed [6:0] n_1_0_sum;
    assign n_1_0_sum = $signed({1'b0,n_1_0_sum_pos}) - $signed({1'b0,n_1_0_sum_neg});

    //linear
    wire signed [6:0] n_1_0;
    assign n_1_0 = n_1_0_sum;

// layer: 1 - neuron: 1
    //weight 0 : skip
    //weight 1 : 1'b1
    wire [3:0] n_1_1_po_1;
    assign n_1_1_po_1 = $unsigned(n_0_1) * $unsigned(1'b1);

    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [3:0] n_1_1_sum_pos;
    assign n_1_1_sum_pos = n_1_1_po_1;
    wire [3:0] n_1_1_sum_neg;
    assign n_1_1_sum_neg = 4'b1000;
    wire signed [4:0] n_1_1_sum;
    assign n_1_1_sum = $signed({1'b0,n_1_1_sum_pos}) - $signed({1'b0,n_1_1_sum_neg});

    //linear
    wire signed [4:0] n_1_1;
    assign n_1_1 = n_1_1_sum;

// layer: 1 - neuron: 2
    //weight abs(-2) : 2'b10
    wire [4:0] n_1_2_po_0;
    assign n_1_2_po_0 = $unsigned(n_0_0) * $unsigned(2'b10);

    //weight 0 : skip
    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [5:0] n_1_2_sum_neg;
    assign n_1_2_sum_neg = 3'b100 + n_1_2_po_0;

    //WARN: only negative weights with linear. Negate.
    wire signed [6:0] n_1_2_sum;
    assign n_1_2_sum = -$signed({1'b0,n_1_2_sum_neg});

    //linear
    wire signed [6:0] n_1_2;
    assign n_1_2 = n_1_2_sum;

// argmax: 3 classes, need 2 bits
// argmax inp: n_1_0, n_1_1, n_1_2
    //comp level 0
    wire cmp_0_0;
    wire signed [6:0] argmax_val_0_0;
    wire [1:0] argmax_idx_0_0;
    assign {cmp_0_0} = ( n_1_0 >= n_1_1 );
    assign {argmax_val_0_0} = ( cmp_0_0 ) ? n_1_0 : n_1_1;
    assign {argmax_idx_0_0} = ( cmp_0_0 ) ? 2'b00 : 2'b01;

    //comp level 1
    wire cmp_1_0;
    wire signed [6:0] argmax_val_1_0;
    wire [1:0] argmax_idx_1_0;
    assign {cmp_1_0} = ( argmax_val_0_0 >= n_1_2 );
    assign {argmax_val_1_0} = ( cmp_1_0 ) ? argmax_val_0_0 : n_1_2;
    assign {argmax_idx_1_0} = ( cmp_1_0 ) ? argmax_idx_0_0 : 2'b10;

    assign out = argmax_idx_1_0;

endmodule
