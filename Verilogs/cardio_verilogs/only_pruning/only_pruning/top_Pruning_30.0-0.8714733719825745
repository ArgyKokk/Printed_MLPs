//weights: [[[-47, 127, -56, 127, 87, 0, -126, -112, 84, -127, 109, 63, 36, 0, 0, 0, 54, 85, 0, -125, 0], [127, -128, 109, -128, 0, 0, 126, 127, -128, 127, 0, 19, -5, 66, 0, 0, 0, 0, 0, 108, -30], [0, -128, 0, 80, 51, 0, 123, 97, 120, -128, -18, 0, -89, 0, 14, 53, -69, -92, -128, 123, -34]], [[127, -128, -124], [0, 0, -128], [-128, 0, 127]]]
//intercepts: [[78, 1, 92], [98, -57, -106]]
module top (inp, out);
input [83:0] inp;
output [1:0] out;

// layer: 0 - neuron: 0
    //weight abs(-47) : 6'b101111
    wire [9:0] n_0_0_po_0;
    assign n_0_0_po_0 = $unsigned(inp[3:0]) * $unsigned(6'b101111);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_0_po_1;
    assign n_0_0_po_1 = $unsigned(inp[7:4]) * $unsigned(7'b1111111);

    //weight abs(-56) : 6'b111000
    wire [9:0] n_0_0_po_2;
    assign n_0_0_po_2 = $unsigned(inp[11:8]) * $unsigned(6'b111000);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_0_po_3;
    assign n_0_0_po_3 = $unsigned(inp[15:12]) * $unsigned(7'b1111111);

    //weight 87 : 7'b1010111
    wire [10:0] n_0_0_po_4;
    assign n_0_0_po_4 = $unsigned(inp[19:16]) * $unsigned(7'b1010111);

    //weight 0 : skip
    //weight abs(-126) : 7'b1111110
    wire [10:0] n_0_0_po_6;
    assign n_0_0_po_6 = $unsigned(inp[27:24]) * $unsigned(7'b1111110);

    //weight abs(-112) : 7'b1110000
    wire [10:0] n_0_0_po_7;
    assign n_0_0_po_7 = $unsigned(inp[31:28]) * $unsigned(7'b1110000);

    //weight 84 : 7'b1010100
    wire [10:0] n_0_0_po_8;
    assign n_0_0_po_8 = $unsigned(inp[35:32]) * $unsigned(7'b1010100);

    //weight abs(-127) : 7'b1111111
    wire [10:0] n_0_0_po_9;
    assign n_0_0_po_9 = $unsigned(inp[39:36]) * $unsigned(7'b1111111);

    //weight 109 : 7'b1101101
    wire [10:0] n_0_0_po_10;
    assign n_0_0_po_10 = $unsigned(inp[43:40]) * $unsigned(7'b1101101);

    //weight 63 : 6'b111111
    wire [9:0] n_0_0_po_11;
    assign n_0_0_po_11 = $unsigned(inp[47:44]) * $unsigned(6'b111111);

    //weight 36 : 6'b100100
    wire [9:0] n_0_0_po_12;
    assign n_0_0_po_12 = $unsigned(inp[51:48]) * $unsigned(6'b100100);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 54 : 6'b110110
    wire [9:0] n_0_0_po_16;
    assign n_0_0_po_16 = $unsigned(inp[67:64]) * $unsigned(6'b110110);

    //weight 85 : 7'b1010101
    wire [10:0] n_0_0_po_17;
    assign n_0_0_po_17 = $unsigned(inp[71:68]) * $unsigned(7'b1010101);

    //weight 0 : skip
    //weight abs(-125) : 7'b1111101
    wire [10:0] n_0_0_po_19;
    assign n_0_0_po_19 = $unsigned(inp[79:76]) * $unsigned(7'b1111101);

    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [14:0] n_0_0_sum_pos;
    assign n_0_0_sum_pos = 11'b10011100000 + n_0_0_po_1 + n_0_0_po_3 + n_0_0_po_4 + n_0_0_po_8 + n_0_0_po_10 + n_0_0_po_11 + n_0_0_po_12 + n_0_0_po_16 + n_0_0_po_17;
    wire [14:0] n_0_0_sum_neg;
    assign n_0_0_sum_neg = n_0_0_po_0 + n_0_0_po_2 + n_0_0_po_6 + n_0_0_po_7 + n_0_0_po_9 + n_0_0_po_19;
    wire signed [15:0] n_0_0_sum;
    assign n_0_0_sum = $signed({1'b0,n_0_0_sum_pos}) - $signed({1'b0,n_0_0_sum_neg});

    //relu
    wire [7:0] n_0_0, n_0_0_qrelu;
    DW01_satrnd #(15, 11, 4) USR_n_0_0 ( .din(n_0_0_sum[14:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_0_qrelu));
    assign n_0_0 = (n_0_0_sum<0) ? $unsigned({8{1'b0}}) : $unsigned(n_0_0_qrelu);

// layer: 0 - neuron: 1
    //weight 127 : 7'b1111111
    wire [10:0] n_0_1_po_0;
    assign n_0_1_po_0 = $unsigned(inp[3:0]) * $unsigned(7'b1111111);

    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_1_po_1;
    assign n_0_1_po_1 = $unsigned(inp[7:4]) * $unsigned(8'b10000000);

    //weight 109 : 7'b1101101
    wire [10:0] n_0_1_po_2;
    assign n_0_1_po_2 = $unsigned(inp[11:8]) * $unsigned(7'b1101101);

    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_1_po_3;
    assign n_0_1_po_3 = $unsigned(inp[15:12]) * $unsigned(8'b10000000);

    //weight 0 : skip
    //weight 0 : skip
    //weight 126 : 7'b1111110
    wire [10:0] n_0_1_po_6;
    //merging with node 0
    assign n_0_1_po_6 = n_0_0_po_6;

    //weight 127 : 7'b1111111
    wire [10:0] n_0_1_po_7;
    assign n_0_1_po_7 = $unsigned(inp[31:28]) * $unsigned(7'b1111111);

    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_1_po_8;
    assign n_0_1_po_8 = $unsigned(inp[35:32]) * $unsigned(8'b10000000);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_1_po_9;
    //merging with node 0
    assign n_0_1_po_9 = n_0_0_po_9;

    //weight 0 : skip
    //weight 19 : 5'b10011
    wire [8:0] n_0_1_po_11;
    assign n_0_1_po_11 = $unsigned(inp[47:44]) * $unsigned(5'b10011);

    //weight abs(-5) : 3'b101
    wire [6:0] n_0_1_po_12;
    assign n_0_1_po_12 = $unsigned(inp[51:48]) * $unsigned(3'b101);

    //weight 66 : 7'b1000010
    wire [10:0] n_0_1_po_13;
    assign n_0_1_po_13 = $unsigned(inp[55:52]) * $unsigned(7'b1000010);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 108 : 7'b1101100
    wire [10:0] n_0_1_po_19;
    assign n_0_1_po_19 = $unsigned(inp[79:76]) * $unsigned(7'b1101100);

    //weight abs(-30) : 5'b11110
    wire [8:0] n_0_1_po_20;
    assign n_0_1_po_20 = $unsigned(inp[83:80]) * $unsigned(5'b11110);

    //accumulate positive/negative subproducts
    wire [13:0] n_0_1_sum_pos;
    assign n_0_1_sum_pos = 5'b10000 + n_0_1_po_0 + n_0_1_po_2 + n_0_1_po_6 + n_0_1_po_7 + n_0_1_po_9 + n_0_1_po_11 + n_0_1_po_13 + n_0_1_po_19;
    wire [13:0] n_0_1_sum_neg;
    assign n_0_1_sum_neg = n_0_1_po_1 + n_0_1_po_3 + n_0_1_po_8 + n_0_1_po_12 + n_0_1_po_20;
    wire signed [14:0] n_0_1_sum;
    assign n_0_1_sum = $signed({1'b0,n_0_1_sum_pos}) - $signed({1'b0,n_0_1_sum_neg});

    //relu
    wire [7:0] n_0_1, n_0_1_qrelu;
    DW01_satrnd #(14, 11, 4) USR_n_0_1 ( .din(n_0_1_sum[13:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_1_qrelu));
    assign n_0_1 = (n_0_1_sum<0) ? $unsigned({8{1'b0}}) : $unsigned(n_0_1_qrelu);

// layer: 0 - neuron: 2
    //weight 0 : skip
    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_2_po_1;
    //merging with node 1
    assign n_0_2_po_1 = n_0_1_po_1;

    //weight 0 : skip
    //weight 80 : 7'b1010000
    wire [10:0] n_0_2_po_3;
    assign n_0_2_po_3 = $unsigned(inp[15:12]) * $unsigned(7'b1010000);

    //weight 51 : 6'b110011
    wire [9:0] n_0_2_po_4;
    assign n_0_2_po_4 = $unsigned(inp[19:16]) * $unsigned(6'b110011);

    //weight 0 : skip
    //weight 123 : 7'b1111011
    wire [10:0] n_0_2_po_6;
    assign n_0_2_po_6 = $unsigned(inp[27:24]) * $unsigned(7'b1111011);

    //weight 97 : 7'b1100001
    wire [10:0] n_0_2_po_7;
    assign n_0_2_po_7 = $unsigned(inp[31:28]) * $unsigned(7'b1100001);

    //weight 120 : 7'b1111000
    wire [10:0] n_0_2_po_8;
    assign n_0_2_po_8 = $unsigned(inp[35:32]) * $unsigned(7'b1111000);

    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_2_po_9;
    assign n_0_2_po_9 = $unsigned(inp[39:36]) * $unsigned(8'b10000000);

    //weight abs(-18) : 5'b10010
    wire [8:0] n_0_2_po_10;
    assign n_0_2_po_10 = $unsigned(inp[43:40]) * $unsigned(5'b10010);

    //weight 0 : skip
    //weight abs(-89) : 7'b1011001
    wire [10:0] n_0_2_po_12;
    assign n_0_2_po_12 = $unsigned(inp[51:48]) * $unsigned(7'b1011001);

    //weight 0 : skip
    //weight 14 : 4'b1110
    wire [7:0] n_0_2_po_14;
    assign n_0_2_po_14 = $unsigned(inp[59:56]) * $unsigned(4'b1110);

    //weight 53 : 6'b110101
    wire [9:0] n_0_2_po_15;
    assign n_0_2_po_15 = $unsigned(inp[63:60]) * $unsigned(6'b110101);

    //weight abs(-69) : 7'b1000101
    wire [10:0] n_0_2_po_16;
    assign n_0_2_po_16 = $unsigned(inp[67:64]) * $unsigned(7'b1000101);

    //weight abs(-92) : 7'b1011100
    wire [10:0] n_0_2_po_17;
    assign n_0_2_po_17 = $unsigned(inp[71:68]) * $unsigned(7'b1011100);

    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_2_po_18;
    assign n_0_2_po_18 = $unsigned(inp[75:72]) * $unsigned(8'b10000000);

    //weight 123 : 7'b1111011
    wire [10:0] n_0_2_po_19;
    assign n_0_2_po_19 = $unsigned(inp[79:76]) * $unsigned(7'b1111011);

    //weight abs(-34) : 6'b100010
    wire [9:0] n_0_2_po_20;
    assign n_0_2_po_20 = $unsigned(inp[83:80]) * $unsigned(6'b100010);

    //accumulate positive/negative subproducts
    wire [14:0] n_0_2_sum_pos;
    assign n_0_2_sum_pos = 11'b10111000000 + n_0_2_po_3 + n_0_2_po_4 + n_0_2_po_6 + n_0_2_po_7 + n_0_2_po_8 + n_0_2_po_14 + n_0_2_po_15 + n_0_2_po_19;
    wire [14:0] n_0_2_sum_neg;
    assign n_0_2_sum_neg = n_0_2_po_1 + n_0_2_po_9 + n_0_2_po_10 + n_0_2_po_12 + n_0_2_po_16 + n_0_2_po_17 + n_0_2_po_18 + n_0_2_po_20;
    wire signed [15:0] n_0_2_sum;
    assign n_0_2_sum = $signed({1'b0,n_0_2_sum_pos}) - $signed({1'b0,n_0_2_sum_neg});

    //relu
    wire [7:0] n_0_2, n_0_2_qrelu;
    DW01_satrnd #(15, 11, 4) USR_n_0_2 ( .din(n_0_2_sum[14:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_2_qrelu));
    assign n_0_2 = (n_0_2_sum<0) ? $unsigned({8{1'b0}}) : $unsigned(n_0_2_qrelu);

// layer: 1 - neuron: 0
    //weight 127 : 7'b1111111
    wire [14:0] n_1_0_po_0;
    assign n_1_0_po_0 = $unsigned(n_0_0) * $unsigned(7'b1111111);

    //weight abs(-128) : 8'b10000000
    wire [15:0] n_1_0_po_1;
    assign n_1_0_po_1 = $unsigned(n_0_1) * $unsigned(8'b10000000);

    //weight abs(-124) : 7'b1111100
    wire [14:0] n_1_0_po_2;
    assign n_1_0_po_2 = $unsigned(n_0_2) * $unsigned(7'b1111100);

    //accumulate positive/negative subproducts
    wire [16:0] n_1_0_sum_pos;
    assign n_1_0_sum_pos = 14'b11000100000000 + n_1_0_po_0;
    wire [16:0] n_1_0_sum_neg;
    assign n_1_0_sum_neg = n_1_0_po_1 + n_1_0_po_2;
    wire signed [17:0] n_1_0_sum;
    assign n_1_0_sum = $signed({1'b0,n_1_0_sum_pos}) - $signed({1'b0,n_1_0_sum_neg});

    //linear
    wire signed [17:0] n_1_0;
    assign n_1_0 = n_1_0_sum;

// layer: 1 - neuron: 1
    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-128) : 8'b10000000
    wire [15:0] n_1_1_po_2;
    assign n_1_1_po_2 = $unsigned(n_0_2) * $unsigned(8'b10000000);

    //accumulate positive/negative subproducts
    wire [16:0] n_1_1_sum_neg;
    assign n_1_1_sum_neg = 13'b1110010000000 + n_1_1_po_2;

    //WARN: only negative weights with linear. Negate.
    wire signed [17:0] n_1_1_sum;
    assign n_1_1_sum = -$signed({1'b0,n_1_1_sum_neg});

    //linear
    wire signed [17:0] n_1_1;
    assign n_1_1 = n_1_1_sum;

// layer: 1 - neuron: 2
    //weight abs(-128) : 8'b10000000
    wire [15:0] n_1_2_po_0;
    assign n_1_2_po_0 = $unsigned(n_0_0) * $unsigned(8'b10000000);

    //weight 0 : skip
    //weight 127 : 7'b1111111
    wire [14:0] n_1_2_po_2;
    assign n_1_2_po_2 = $unsigned(n_0_2) * $unsigned(7'b1111111);

    //accumulate positive/negative subproducts
    wire [16:0] n_1_2_sum_pos;
    assign n_1_2_sum_pos = n_1_2_po_2;
    wire [16:0] n_1_2_sum_neg;
    assign n_1_2_sum_neg = 14'b11010100000000 + n_1_2_po_0;
    wire signed [17:0] n_1_2_sum;
    assign n_1_2_sum = $signed({1'b0,n_1_2_sum_pos}) - $signed({1'b0,n_1_2_sum_neg});

    //linear
    wire signed [17:0] n_1_2;
    assign n_1_2 = n_1_2_sum;

// argmax: 3 classes, need 2 bits
// argmax inp: n_1_0, n_1_1, n_1_2
    //comp level 0
    wire cmp_0_0;
    wire signed [17:0] argmax_val_0_0;
    wire [1:0] argmax_idx_0_0;
    assign {cmp_0_0} = ( n_1_0 >= n_1_1 );
    assign {argmax_val_0_0} = ( cmp_0_0 ) ? n_1_0 : n_1_1;
    assign {argmax_idx_0_0} = ( cmp_0_0 ) ? 2'b00 : 2'b01;

    //comp level 1
    wire cmp_1_0;
    wire signed [17:0] argmax_val_1_0;
    wire [1:0] argmax_idx_1_0;
    assign {cmp_1_0} = ( argmax_val_0_0 >= n_1_2 );
    assign {argmax_val_1_0} = ( cmp_1_0 ) ? argmax_val_0_0 : n_1_2;
    assign {argmax_idx_1_0} = ( cmp_1_0 ) ? argmax_idx_0_0 : 2'b10;

    assign out = argmax_idx_1_0;

endmodule
