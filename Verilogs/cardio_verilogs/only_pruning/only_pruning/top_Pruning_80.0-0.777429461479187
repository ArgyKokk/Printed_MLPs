//weights: [[[0, 127, 0, 120, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0], [107, -128, 0, 0, 0, 0, 127, 127, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 117, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, 111, 0]], [[0, -128, 0], [0, 0, 0], [-128, 0, 0]]]
//intercepts: [[84, -48, 48], [127, -127, -110]]
module top (inp, out);
input [83:0] inp;
output [1:0] out;

// layer: 0 - neuron: 0
    //weight 0 : skip
    //weight 127 : 7'b1111111
    wire [10:0] n_0_0_po_1;
    assign n_0_0_po_1 = $unsigned(inp[7:4]) * $unsigned(7'b1111111);

    //weight 0 : skip
    //weight 120 : 7'b1111000
    wire [10:0] n_0_0_po_3;
    assign n_0_0_po_3 = $unsigned(inp[15:12]) * $unsigned(7'b1111000);

    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_0_po_6;
    assign n_0_0_po_6 = $unsigned(inp[27:24]) * $unsigned(8'b10000000);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_0_po_19;
    assign n_0_0_po_19 = $unsigned(inp[79:76]) * $unsigned(8'b10000000);

    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [12:0] n_0_0_sum_pos;
    assign n_0_0_sum_pos = 11'b10101000000 + n_0_0_po_1 + n_0_0_po_3;
    wire [12:0] n_0_0_sum_neg;
    assign n_0_0_sum_neg = n_0_0_po_6 + n_0_0_po_19;
    wire signed [13:0] n_0_0_sum;
    assign n_0_0_sum = $signed({1'b0,n_0_0_sum_pos}) - $signed({1'b0,n_0_0_sum_neg});

    //relu
    wire [7:0] n_0_0, n_0_0_qrelu;
    DW01_satrnd #(13, 11, 4) USR_n_0_0 ( .din(n_0_0_sum[12:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_0_qrelu));
    assign n_0_0 = (n_0_0_sum<0) ? $unsigned({8{1'b0}}) : $unsigned(n_0_0_qrelu);

// layer: 0 - neuron: 1
    //weight 107 : 7'b1101011
    wire [10:0] n_0_1_po_0;
    assign n_0_1_po_0 = $unsigned(inp[3:0]) * $unsigned(7'b1101011);

    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_1_po_1;
    assign n_0_1_po_1 = $unsigned(inp[7:4]) * $unsigned(8'b10000000);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 127 : 7'b1111111
    wire [10:0] n_0_1_po_6;
    assign n_0_1_po_6 = $unsigned(inp[27:24]) * $unsigned(7'b1111111);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_1_po_7;
    assign n_0_1_po_7 = $unsigned(inp[31:28]) * $unsigned(7'b1111111);

    //weight 0 : skip
    //weight 127 : 7'b1111111
    wire [10:0] n_0_1_po_9;
    assign n_0_1_po_9 = $unsigned(inp[39:36]) * $unsigned(7'b1111111);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [12:0] n_0_1_sum_pos;
    assign n_0_1_sum_pos = n_0_1_po_0 + n_0_1_po_6 + n_0_1_po_7 + n_0_1_po_9;
    wire [12:0] n_0_1_sum_neg;
    assign n_0_1_sum_neg = 10'b1100000000 + n_0_1_po_1;
    wire signed [13:0] n_0_1_sum;
    assign n_0_1_sum = $signed({1'b0,n_0_1_sum_pos}) - $signed({1'b0,n_0_1_sum_neg});

    //relu
    wire [7:0] n_0_1, n_0_1_qrelu;
    DW01_satrnd #(13, 11, 4) USR_n_0_1 ( .din(n_0_1_sum[12:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_1_qrelu));
    assign n_0_1 = (n_0_1_sum<0) ? $unsigned({8{1'b0}}) : $unsigned(n_0_1_qrelu);

// layer: 0 - neuron: 2
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 117 : 7'b1110101
    wire [10:0] n_0_2_po_6;
    assign n_0_2_po_6 = $unsigned(inp[27:24]) * $unsigned(7'b1110101);

    //weight 0 : skip
    //weight 94 : 7'b1011110
    wire [10:0] n_0_2_po_8;
    assign n_0_2_po_8 = $unsigned(inp[35:32]) * $unsigned(7'b1011110);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-125) : 7'b1111101
    wire [10:0] n_0_2_po_18;
    assign n_0_2_po_18 = $unsigned(inp[75:72]) * $unsigned(7'b1111101);

    //weight 111 : 7'b1101111
    wire [10:0] n_0_2_po_19;
    assign n_0_2_po_19 = $unsigned(inp[79:76]) * $unsigned(7'b1101111);

    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [12:0] n_0_2_sum_pos;
    assign n_0_2_sum_pos = 10'b1100000000 + n_0_2_po_6 + n_0_2_po_8 + n_0_2_po_19;
    wire [12:0] n_0_2_sum_neg;
    assign n_0_2_sum_neg = n_0_2_po_18;
    wire signed [13:0] n_0_2_sum;
    assign n_0_2_sum = $signed({1'b0,n_0_2_sum_pos}) - $signed({1'b0,n_0_2_sum_neg});

    //relu
    wire [7:0] n_0_2, n_0_2_qrelu;
    DW01_satrnd #(13, 11, 4) USR_n_0_2 ( .din(n_0_2_sum[12:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_2_qrelu));
    assign n_0_2 = (n_0_2_sum<0) ? $unsigned({8{1'b0}}) : $unsigned(n_0_2_qrelu);

// layer: 1 - neuron: 0
    //weight 0 : skip
    //weight abs(-128) : 8'b10000000
    wire [15:0] n_1_0_po_1;
    assign n_1_0_po_1 = $unsigned(n_0_1) * $unsigned(8'b10000000);

    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [15:0] n_1_0_sum_pos;
    assign n_1_0_sum_pos = 14'b11111110000000;
    wire [15:0] n_1_0_sum_neg;
    assign n_1_0_sum_neg = n_1_0_po_1;
    wire signed [16:0] n_1_0_sum;
    assign n_1_0_sum = $signed({1'b0,n_1_0_sum_pos}) - $signed({1'b0,n_1_0_sum_neg});

    //linear
    wire signed [16:0] n_1_0;
    assign n_1_0 = n_1_0_sum;

// layer: 1 - neuron: 1
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [13:0] n_1_1_sum_neg;
    assign n_1_1_sum_neg = 14'b11111110000000;

    //WARN: only negative weights with linear. Negate.
    wire signed [14:0] n_1_1_sum;
    assign n_1_1_sum = -$signed({1'b0,n_1_1_sum_neg});

    //linear
    wire signed [14:0] n_1_1;
    assign n_1_1 = n_1_1_sum;

// layer: 1 - neuron: 2
    //weight abs(-128) : 8'b10000000
    wire [15:0] n_1_2_po_0;
    assign n_1_2_po_0 = $unsigned(n_0_0) * $unsigned(8'b10000000);

    //weight 0 : skip
    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [16:0] n_1_2_sum_neg;
    assign n_1_2_sum_neg = 14'b11011100000000 + n_1_2_po_0;

    //WARN: only negative weights with linear. Negate.
    wire signed [17:0] n_1_2_sum;
    assign n_1_2_sum = -$signed({1'b0,n_1_2_sum_neg});

    //linear
    wire signed [17:0] n_1_2;
    assign n_1_2 = n_1_2_sum;

// argmax: 3 classes, need 2 bits
// argmax inp: n_1_0, n_1_1, n_1_2
    //comp level 0
    wire cmp_0_0;
    wire signed [17:0] argmax_val_0_0;
    wire [1:0] argmax_idx_0_0;
    assign {cmp_0_0} = ( n_1_0 >= n_1_1 );
    assign {argmax_val_0_0} = ( cmp_0_0 ) ? n_1_0 : n_1_1;
    assign {argmax_idx_0_0} = ( cmp_0_0 ) ? 2'b00 : 2'b01;

    //comp level 1
    wire cmp_1_0;
    wire signed [17:0] argmax_val_1_0;
    wire [1:0] argmax_idx_1_0;
    assign {cmp_1_0} = ( argmax_val_0_0 >= n_1_2 );
    assign {argmax_val_1_0} = ( cmp_1_0 ) ? argmax_val_0_0 : n_1_2;
    assign {argmax_idx_1_0} = ( cmp_1_0 ) ? argmax_idx_0_0 : 2'b10;

    assign out = argmax_idx_1_0;

endmodule
