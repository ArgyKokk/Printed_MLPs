//weights: [[[-43, -128, -1, -86, -128, 127, -86, 127, -43, 127, 127], [-86, 127, -43, -86, 127, 42, 127, 127, -43, -128, -128]], [[-128, -86], [-128, -1], [-1, 127], [127, -1], [127, -128], [42, -128]]]
//intercepts: [[127, 126], [-7, 61, 112, 93, 57, -127]]
module top (inp, out);
input [43:0] inp;
output [2:0] out;

// layer: 0 - neuron: 0
    //weight abs(-43) : 6'b101011
    wire [9:0] n_0_0_po_0;
    assign n_0_0_po_0 = $unsigned(inp[3:0]) * $unsigned(6'b101011);

    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_0_po_1;
    assign n_0_0_po_1 = $unsigned(inp[7:4]) * $unsigned(8'b10000000);

    //weight abs(-1) : 1'b1
    wire [4:0] n_0_0_po_2;
    assign n_0_0_po_2 = $unsigned(inp[11:8]) * $unsigned(1'b1);

    //weight abs(-86) : 7'b1010110
    wire [10:0] n_0_0_po_3;
    assign n_0_0_po_3 = $unsigned(inp[15:12]) * $unsigned(7'b1010110);

    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_0_po_4;
    assign n_0_0_po_4 = $unsigned(inp[19:16]) * $unsigned(8'b10000000);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_0_po_5;
    assign n_0_0_po_5 = $unsigned(inp[23:20]) * $unsigned(7'b1111111);

    //weight abs(-86) : 7'b1010110
    wire [10:0] n_0_0_po_6;
    assign n_0_0_po_6 = $unsigned(inp[27:24]) * $unsigned(7'b1010110);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_0_po_7;
    assign n_0_0_po_7 = $unsigned(inp[31:28]) * $unsigned(7'b1111111);

    //weight abs(-43) : 6'b101011
    wire [9:0] n_0_0_po_8;
    assign n_0_0_po_8 = $unsigned(inp[35:32]) * $unsigned(6'b101011);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_0_po_9;
    assign n_0_0_po_9 = $unsigned(inp[39:36]) * $unsigned(7'b1111111);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_0_po_10;
    assign n_0_0_po_10 = $unsigned(inp[43:40]) * $unsigned(7'b1111111);

    //accumulate positive/negative subproducts
    wire [13:0] n_0_0_sum_pos;
    assign n_0_0_sum_pos = 11'b11111110000 + n_0_0_po_5 + n_0_0_po_7 + n_0_0_po_9 + n_0_0_po_10;
    wire [13:0] n_0_0_sum_neg;
    assign n_0_0_sum_neg = n_0_0_po_0 + n_0_0_po_1 + n_0_0_po_2 + n_0_0_po_3 + n_0_0_po_4 + n_0_0_po_6 + n_0_0_po_8;
    wire signed [14:0] n_0_0_sum;
    assign n_0_0_sum = $signed({1'b0,n_0_0_sum_pos}) - $signed({1'b0,n_0_0_sum_neg});

    //relu
    wire [8:0] n_0_0, n_0_0_qrelu;
    DW01_satrnd #(14, 11, 3) USR_n_0_0 ( .din(n_0_0_sum[13:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_0_qrelu));
    assign n_0_0 = (n_0_0_sum<0) ? $unsigned({9{1'b0}}) : $unsigned(n_0_0_qrelu);

// layer: 0 - neuron: 1
    //weight abs(-86) : 7'b1010110
    wire [10:0] n_0_1_po_0;
    assign n_0_1_po_0 = $unsigned(inp[3:0]) * $unsigned(7'b1010110);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_1_po_1;
    assign n_0_1_po_1 = $unsigned(inp[7:4]) * $unsigned(7'b1111111);

    //weight abs(-43) : 6'b101011
    wire [9:0] n_0_1_po_2;
    assign n_0_1_po_2 = $unsigned(inp[11:8]) * $unsigned(6'b101011);

    //weight abs(-86) : 7'b1010110
    wire [10:0] n_0_1_po_3;
    //merging with node 0
    assign n_0_1_po_3 = n_0_0_po_3;

    //weight 127 : 7'b1111111
    wire [10:0] n_0_1_po_4;
    assign n_0_1_po_4 = $unsigned(inp[19:16]) * $unsigned(7'b1111111);

    //weight 42 : 6'b101010
    wire [9:0] n_0_1_po_5;
    assign n_0_1_po_5 = $unsigned(inp[23:20]) * $unsigned(6'b101010);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_1_po_6;
    assign n_0_1_po_6 = $unsigned(inp[27:24]) * $unsigned(7'b1111111);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_1_po_7;
    //merging with node 0
    assign n_0_1_po_7 = n_0_0_po_7;

    //weight abs(-43) : 6'b101011
    wire [9:0] n_0_1_po_8;
    //merging with node 0
    assign n_0_1_po_8 = n_0_0_po_8;

    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_1_po_9;
    assign n_0_1_po_9 = $unsigned(inp[39:36]) * $unsigned(8'b10000000);

    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_1_po_10;
    assign n_0_1_po_10 = $unsigned(inp[43:40]) * $unsigned(8'b10000000);

    //accumulate positive/negative subproducts
    wire [13:0] n_0_1_sum_pos;
    assign n_0_1_sum_pos = 11'b11111100000 + n_0_1_po_1 + n_0_1_po_4 + n_0_1_po_5 + n_0_1_po_6 + n_0_1_po_7;
    wire [13:0] n_0_1_sum_neg;
    assign n_0_1_sum_neg = n_0_1_po_0 + n_0_1_po_2 + n_0_1_po_3 + n_0_1_po_8 + n_0_1_po_9 + n_0_1_po_10;
    wire signed [14:0] n_0_1_sum;
    assign n_0_1_sum = $signed({1'b0,n_0_1_sum_pos}) - $signed({1'b0,n_0_1_sum_neg});

    //relu
    wire [8:0] n_0_1, n_0_1_qrelu;
    DW01_satrnd #(14, 11, 3) USR_n_0_1 ( .din(n_0_1_sum[13:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_1_qrelu));
    assign n_0_1 = (n_0_1_sum<0) ? $unsigned({9{1'b0}}) : $unsigned(n_0_1_qrelu);

// layer: 1 - neuron: 0
    //weight abs(-128) : 8'b10000000
    wire [16:0] n_1_0_po_0;
    assign n_1_0_po_0 = $unsigned(n_0_0) * $unsigned(8'b10000000);

    //weight abs(-86) : 7'b1010110
    wire [15:0] n_1_0_po_1;
    assign n_1_0_po_1 = $unsigned(n_0_1) * $unsigned(7'b1010110);

    //accumulate positive/negative subproducts
    wire [17:0] n_1_0_sum_neg;
    assign n_1_0_sum_neg = 11'b11100000000 + n_1_0_po_0 + n_1_0_po_1;

    //WARN: only negative weights with linear. Negate.
    wire signed [18:0] n_1_0_sum;
    assign n_1_0_sum = -$signed({1'b0,n_1_0_sum_neg});

    //linear
    wire signed [18:0] n_1_0;
    assign n_1_0 = n_1_0_sum;

// layer: 1 - neuron: 1
    //weight abs(-128) : 8'b10000000
    wire [16:0] n_1_1_po_0;
    //merging with node 0
    assign n_1_1_po_0 = n_1_0_po_0;

    //weight abs(-1) : 1'b1
    wire [9:0] n_1_1_po_1;
    assign n_1_1_po_1 = $unsigned(n_0_1) * $unsigned(1'b1);

    //accumulate positive/negative subproducts
    wire [13:0] n_1_1_sum_pos;
    assign n_1_1_sum_pos = 14'b11110100000000;
    wire [17:0] n_1_1_sum_neg;
    assign n_1_1_sum_neg = n_1_1_po_0 + n_1_1_po_1;
    wire signed [18:0] n_1_1_sum;
    assign n_1_1_sum = $signed({1'b0,n_1_1_sum_pos}) - $signed({1'b0,n_1_1_sum_neg});

    //linear
    wire signed [18:0] n_1_1;
    assign n_1_1 = n_1_1_sum;

// layer: 1 - neuron: 2
    //weight abs(-1) : 1'b1
    wire [9:0] n_1_2_po_0;
    assign n_1_2_po_0 = $unsigned(n_0_0) * $unsigned(1'b1);

    //weight 127 : 7'b1111111
    wire [15:0] n_1_2_po_1;
    assign n_1_2_po_1 = $unsigned(n_0_1) * $unsigned(7'b1111111);

    //accumulate positive/negative subproducts
    wire [16:0] n_1_2_sum_pos;
    assign n_1_2_sum_pos = 15'b111000000000000 + n_1_2_po_1;
    wire [9:0] n_1_2_sum_neg;
    assign n_1_2_sum_neg = n_1_2_po_0;
    wire signed [17:0] n_1_2_sum;
    assign n_1_2_sum = $signed({1'b0,n_1_2_sum_pos}) - $signed({1'b0,n_1_2_sum_neg});

    //linear
    wire signed [17:0] n_1_2;
    assign n_1_2 = n_1_2_sum;

// layer: 1 - neuron: 3
    //weight 127 : 7'b1111111
    wire [15:0] n_1_3_po_0;
    assign n_1_3_po_0 = $unsigned(n_0_0) * $unsigned(7'b1111111);

    //weight abs(-1) : 1'b1
    wire [9:0] n_1_3_po_1;
    //merging with node 1
    assign n_1_3_po_1 = n_1_1_po_1;

    //accumulate positive/negative subproducts
    wire [16:0] n_1_3_sum_pos;
    assign n_1_3_sum_pos = 15'b101110100000000 + n_1_3_po_0;
    wire [9:0] n_1_3_sum_neg;
    assign n_1_3_sum_neg = n_1_3_po_1;
    wire signed [17:0] n_1_3_sum;
    assign n_1_3_sum = $signed({1'b0,n_1_3_sum_pos}) - $signed({1'b0,n_1_3_sum_neg});

    //linear
    wire signed [17:0] n_1_3;
    assign n_1_3 = n_1_3_sum;

// layer: 1 - neuron: 4
    //weight 127 : 7'b1111111
    wire [15:0] n_1_4_po_0;
    //merging with node 3
    assign n_1_4_po_0 = n_1_3_po_0;

    //weight abs(-128) : 8'b10000000
    wire [16:0] n_1_4_po_1;
    assign n_1_4_po_1 = $unsigned(n_0_1) * $unsigned(8'b10000000);

    //accumulate positive/negative subproducts
    wire [16:0] n_1_4_sum_pos;
    assign n_1_4_sum_pos = 14'b11100100000000 + n_1_4_po_0;
    wire [16:0] n_1_4_sum_neg;
    assign n_1_4_sum_neg = n_1_4_po_1;
    wire signed [17:0] n_1_4_sum;
    assign n_1_4_sum = $signed({1'b0,n_1_4_sum_pos}) - $signed({1'b0,n_1_4_sum_neg});

    //linear
    wire signed [17:0] n_1_4;
    assign n_1_4 = n_1_4_sum;

// layer: 1 - neuron: 5
    //weight 42 : 6'b101010
    wire [14:0] n_1_5_po_0;
    assign n_1_5_po_0 = $unsigned(n_0_0) * $unsigned(6'b101010);

    //weight abs(-128) : 8'b10000000
    wire [16:0] n_1_5_po_1;
    //merging with node 4
    assign n_1_5_po_1 = n_1_4_po_1;

    //accumulate positive/negative subproducts
    wire [14:0] n_1_5_sum_pos;
    assign n_1_5_sum_pos = n_1_5_po_0;
    wire [17:0] n_1_5_sum_neg;
    assign n_1_5_sum_neg = 15'b111111100000000 + n_1_5_po_1;
    wire signed [18:0] n_1_5_sum;
    assign n_1_5_sum = $signed({1'b0,n_1_5_sum_pos}) - $signed({1'b0,n_1_5_sum_neg});

    //linear
    wire signed [18:0] n_1_5;
    assign n_1_5 = n_1_5_sum;

// argmax: 6 classes, need 3 bits
// argmax inp: n_1_0, n_1_1, n_1_2, n_1_3, n_1_4, n_1_5
    //comp level 0
    wire cmp_0_0;
    wire signed [18:0] argmax_val_0_0;
    wire [2:0] argmax_idx_0_0;
    assign {cmp_0_0} = ( n_1_0 >= n_1_1 );
    assign {argmax_val_0_0} = ( cmp_0_0 ) ? n_1_0 : n_1_1;
    assign {argmax_idx_0_0} = ( cmp_0_0 ) ? 3'b000 : 3'b001;

    wire cmp_0_2;
    wire signed [18:0] argmax_val_0_2;
    wire [2:0] argmax_idx_0_2;
    assign {cmp_0_2} = ( n_1_2 >= n_1_3 );
    assign {argmax_val_0_2} = ( cmp_0_2 ) ? n_1_2 : n_1_3;
    assign {argmax_idx_0_2} = ( cmp_0_2 ) ? 3'b010 : 3'b011;

    wire cmp_0_4;
    wire signed [18:0] argmax_val_0_4;
    wire [2:0] argmax_idx_0_4;
    assign {cmp_0_4} = ( n_1_4 >= n_1_5 );
    assign {argmax_val_0_4} = ( cmp_0_4 ) ? n_1_4 : n_1_5;
    assign {argmax_idx_0_4} = ( cmp_0_4 ) ? 3'b100 : 3'b101;

    //comp level 1
    wire cmp_1_0;
    wire signed [18:0] argmax_val_1_0;
    wire [2:0] argmax_idx_1_0;
    assign {cmp_1_0} = ( argmax_val_0_0 >= argmax_val_0_2 );
    assign {argmax_val_1_0} = ( cmp_1_0 ) ? argmax_val_0_0 : argmax_val_0_2;
    assign {argmax_idx_1_0} = ( cmp_1_0 ) ? argmax_idx_0_0 : argmax_idx_0_2;

    //comp level 2
    wire cmp_2_0;
    wire signed [18:0] argmax_val_2_0;
    wire [2:0] argmax_idx_2_0;
    assign {cmp_2_0} = ( argmax_val_1_0 >= argmax_val_0_4 );
    assign {argmax_val_2_0} = ( cmp_2_0 ) ? argmax_val_1_0 : argmax_val_0_4;
    assign {argmax_idx_2_0} = ( cmp_2_0 ) ? argmax_idx_1_0 : argmax_idx_0_4;

    assign out = argmax_idx_2_0;

endmodule
