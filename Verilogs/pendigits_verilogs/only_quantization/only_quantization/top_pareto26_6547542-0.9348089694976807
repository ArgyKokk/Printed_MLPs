//weights: [[[4, 5, 3, 4, 0, -1, -6, -4, -4, -6, 0, -5, 0, 7, -9, 8], [7, 5, 2, 4, -4, -1, -3, -2, 5, -3, 11, 0, 5, -10, -11, -9], [-3, 1, -5, 0, 9, -2, 2, -5, -11, 3, -2, 4, -1, 6, 8, 3], [-8, 2, 1, 8, 6, 3, 4, -2, 6, -8, -3, -8, -2, -3, 0, -7], [-5, 9, -4, 4, 1, -3, -1, -5, 4, -4, 1, 2, -1, 10, -2, 11]], [[0, -11, -56, -61, 41], [5, -21, -40, 25, -52], [1, -34, 32, 23, -55], [-28, 9, -44, 20, -1], [-36, 15, -44, -32, 25], [-1, 18, 38, -7, -20], [29, 6, -38, -18, 4], [-7, -21, -15, 20, 18], [23, -37, -28, -2, 13], [-64, 31, 50, -21, -32]]]
//intercepts: [[7, -3, -3, 7, -1], [2, 15, -4, -16, 13, -2, -16, -9, 13, 11]]
module top (inp, out);
input [63:0] inp;
output [3:0] out;

// layer: 0 - neuron: 0
    //weight 4 : 3'b100
    wire [6:0] n_0_0_po_0;
    assign n_0_0_po_0 = $unsigned(inp[3:0]) * $unsigned(3'b100);

    //weight 5 : 3'b101
    wire [6:0] n_0_0_po_1;
    assign n_0_0_po_1 = $unsigned(inp[7:4]) * $unsigned(3'b101);

    //weight 3 : 2'b11
    wire [5:0] n_0_0_po_2;
    assign n_0_0_po_2 = $unsigned(inp[11:8]) * $unsigned(2'b11);

    //weight 4 : 3'b100
    wire [6:0] n_0_0_po_3;
    assign n_0_0_po_3 = $unsigned(inp[15:12]) * $unsigned(3'b100);

    //weight 0 : skip
    //weight abs(-1) : 1'b1
    wire [4:0] n_0_0_po_5;
    assign n_0_0_po_5 = $unsigned(inp[23:20]) * $unsigned(1'b1);

    //weight abs(-6) : 3'b110
    wire [6:0] n_0_0_po_6;
    assign n_0_0_po_6 = $unsigned(inp[27:24]) * $unsigned(3'b110);

    //weight abs(-4) : 3'b100
    wire [6:0] n_0_0_po_7;
    assign n_0_0_po_7 = $unsigned(inp[31:28]) * $unsigned(3'b100);

    //weight abs(-4) : 3'b100
    wire [6:0] n_0_0_po_8;
    assign n_0_0_po_8 = $unsigned(inp[35:32]) * $unsigned(3'b100);

    //weight abs(-6) : 3'b110
    wire [6:0] n_0_0_po_9;
    assign n_0_0_po_9 = $unsigned(inp[39:36]) * $unsigned(3'b110);

    //weight 0 : skip
    //weight abs(-5) : 3'b101
    wire [6:0] n_0_0_po_11;
    assign n_0_0_po_11 = $unsigned(inp[47:44]) * $unsigned(3'b101);

    //weight 0 : skip
    //weight 7 : 3'b111
    wire [6:0] n_0_0_po_13;
    assign n_0_0_po_13 = $unsigned(inp[55:52]) * $unsigned(3'b111);

    //weight abs(-9) : 4'b1001
    wire [7:0] n_0_0_po_14;
    assign n_0_0_po_14 = $unsigned(inp[59:56]) * $unsigned(4'b1001);

    //weight 8 : 4'b1000
    wire [7:0] n_0_0_po_15;
    assign n_0_0_po_15 = $unsigned(inp[63:60]) * $unsigned(4'b1000);

    //accumulate positive/negative subproducts
    wire [9:0] n_0_0_sum_pos;
    assign n_0_0_sum_pos = 6'b111000 + n_0_0_po_0 + n_0_0_po_1 + n_0_0_po_2 + n_0_0_po_3 + n_0_0_po_13 + n_0_0_po_15;
    wire [9:0] n_0_0_sum_neg;
    assign n_0_0_sum_neg = n_0_0_po_5 + n_0_0_po_6 + n_0_0_po_7 + n_0_0_po_8 + n_0_0_po_9 + n_0_0_po_11 + n_0_0_po_14;
    wire signed [10:0] n_0_0_sum;
    assign n_0_0_sum = $signed({1'b0,n_0_0_sum_pos}) - $signed({1'b0,n_0_0_sum_neg});

    //relu
    wire [5:0] n_0_0, n_0_0_qrelu;
    DW01_satrnd #(10, 7, 2) USR_n_0_0 ( .din(n_0_0_sum[9:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_0_qrelu));
    assign n_0_0 = (n_0_0_sum<0) ? $unsigned({6{1'b0}}) : $unsigned(n_0_0_qrelu);

// layer: 0 - neuron: 1
    //weight 7 : 3'b111
    wire [6:0] n_0_1_po_0;
    assign n_0_1_po_0 = $unsigned(inp[3:0]) * $unsigned(3'b111);

    //weight 5 : 3'b101
    wire [6:0] n_0_1_po_1;
    //merging with node 0
    assign n_0_1_po_1 = n_0_0_po_1;

    //weight 2 : 2'b10
    wire [5:0] n_0_1_po_2;
    assign n_0_1_po_2 = $unsigned(inp[11:8]) * $unsigned(2'b10);

    //weight 4 : 3'b100
    wire [6:0] n_0_1_po_3;
    //merging with node 0
    assign n_0_1_po_3 = n_0_0_po_3;

    //weight abs(-4) : 3'b100
    wire [6:0] n_0_1_po_4;
    assign n_0_1_po_4 = $unsigned(inp[19:16]) * $unsigned(3'b100);

    //weight abs(-1) : 1'b1
    wire [4:0] n_0_1_po_5;
    //merging with node 0
    assign n_0_1_po_5 = n_0_0_po_5;

    //weight abs(-3) : 2'b11
    wire [5:0] n_0_1_po_6;
    assign n_0_1_po_6 = $unsigned(inp[27:24]) * $unsigned(2'b11);

    //weight abs(-2) : 2'b10
    wire [5:0] n_0_1_po_7;
    assign n_0_1_po_7 = $unsigned(inp[31:28]) * $unsigned(2'b10);

    //weight 5 : 3'b101
    wire [6:0] n_0_1_po_8;
    assign n_0_1_po_8 = $unsigned(inp[35:32]) * $unsigned(3'b101);

    //weight abs(-3) : 2'b11
    wire [5:0] n_0_1_po_9;
    assign n_0_1_po_9 = $unsigned(inp[39:36]) * $unsigned(2'b11);

    //weight 11 : 4'b1011
    wire [7:0] n_0_1_po_10;
    assign n_0_1_po_10 = $unsigned(inp[43:40]) * $unsigned(4'b1011);

    //weight 0 : skip
    //weight 5 : 3'b101
    wire [6:0] n_0_1_po_12;
    assign n_0_1_po_12 = $unsigned(inp[51:48]) * $unsigned(3'b101);

    //weight abs(-10) : 4'b1010
    wire [7:0] n_0_1_po_13;
    assign n_0_1_po_13 = $unsigned(inp[55:52]) * $unsigned(4'b1010);

    //weight abs(-11) : 4'b1011
    wire [7:0] n_0_1_po_14;
    assign n_0_1_po_14 = $unsigned(inp[59:56]) * $unsigned(4'b1011);

    //weight abs(-9) : 4'b1001
    wire [7:0] n_0_1_po_15;
    assign n_0_1_po_15 = $unsigned(inp[63:60]) * $unsigned(4'b1001);

    //accumulate positive/negative subproducts
    wire [10:0] n_0_1_sum_pos;
    assign n_0_1_sum_pos = n_0_1_po_0 + n_0_1_po_1 + n_0_1_po_2 + n_0_1_po_3 + n_0_1_po_8 + n_0_1_po_10 + n_0_1_po_12;
    wire [10:0] n_0_1_sum_neg;
    assign n_0_1_sum_neg = 5'b11000 + n_0_1_po_4 + n_0_1_po_5 + n_0_1_po_6 + n_0_1_po_7 + n_0_1_po_9 + n_0_1_po_13 + n_0_1_po_14 + n_0_1_po_15;
    wire signed [11:0] n_0_1_sum;
    assign n_0_1_sum = $signed({1'b0,n_0_1_sum_pos}) - $signed({1'b0,n_0_1_sum_neg});

    //relu
    wire [5:0] n_0_1, n_0_1_qrelu;
    DW01_satrnd #(11, 7, 2) USR_n_0_1 ( .din(n_0_1_sum[10:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_1_qrelu));
    assign n_0_1 = (n_0_1_sum<0) ? $unsigned({6{1'b0}}) : $unsigned(n_0_1_qrelu);

// layer: 0 - neuron: 2
    //weight abs(-3) : 2'b11
    wire [5:0] n_0_2_po_0;
    assign n_0_2_po_0 = $unsigned(inp[3:0]) * $unsigned(2'b11);

    //weight 1 : 1'b1
    wire [4:0] n_0_2_po_1;
    assign n_0_2_po_1 = $unsigned(inp[7:4]) * $unsigned(1'b1);

    //weight abs(-5) : 3'b101
    wire [6:0] n_0_2_po_2;
    assign n_0_2_po_2 = $unsigned(inp[11:8]) * $unsigned(3'b101);

    //weight 0 : skip
    //weight 9 : 4'b1001
    wire [7:0] n_0_2_po_4;
    assign n_0_2_po_4 = $unsigned(inp[19:16]) * $unsigned(4'b1001);

    //weight abs(-2) : 2'b10
    wire [5:0] n_0_2_po_5;
    assign n_0_2_po_5 = $unsigned(inp[23:20]) * $unsigned(2'b10);

    //weight 2 : 2'b10
    wire [5:0] n_0_2_po_6;
    assign n_0_2_po_6 = $unsigned(inp[27:24]) * $unsigned(2'b10);

    //weight abs(-5) : 3'b101
    wire [6:0] n_0_2_po_7;
    assign n_0_2_po_7 = $unsigned(inp[31:28]) * $unsigned(3'b101);

    //weight abs(-11) : 4'b1011
    wire [7:0] n_0_2_po_8;
    assign n_0_2_po_8 = $unsigned(inp[35:32]) * $unsigned(4'b1011);

    //weight 3 : 2'b11
    wire [5:0] n_0_2_po_9;
    //merging with node 1
    assign n_0_2_po_9 = n_0_1_po_9;

    //weight abs(-2) : 2'b10
    wire [5:0] n_0_2_po_10;
    assign n_0_2_po_10 = $unsigned(inp[43:40]) * $unsigned(2'b10);

    //weight 4 : 3'b100
    wire [6:0] n_0_2_po_11;
    assign n_0_2_po_11 = $unsigned(inp[47:44]) * $unsigned(3'b100);

    //weight abs(-1) : 1'b1
    wire [4:0] n_0_2_po_12;
    assign n_0_2_po_12 = $unsigned(inp[51:48]) * $unsigned(1'b1);

    //weight 6 : 3'b110
    wire [6:0] n_0_2_po_13;
    assign n_0_2_po_13 = $unsigned(inp[55:52]) * $unsigned(3'b110);

    //weight 8 : 4'b1000
    wire [7:0] n_0_2_po_14;
    assign n_0_2_po_14 = $unsigned(inp[59:56]) * $unsigned(4'b1000);

    //weight 3 : 2'b11
    wire [5:0] n_0_2_po_15;
    assign n_0_2_po_15 = $unsigned(inp[63:60]) * $unsigned(2'b11);

    //accumulate positive/negative subproducts
    wire [9:0] n_0_2_sum_pos;
    assign n_0_2_sum_pos = n_0_2_po_1 + n_0_2_po_4 + n_0_2_po_6 + n_0_2_po_9 + n_0_2_po_11 + n_0_2_po_13 + n_0_2_po_14 + n_0_2_po_15;
    wire [9:0] n_0_2_sum_neg;
    assign n_0_2_sum_neg = 5'b11000 + n_0_2_po_0 + n_0_2_po_2 + n_0_2_po_5 + n_0_2_po_7 + n_0_2_po_8 + n_0_2_po_10 + n_0_2_po_12;
    wire signed [10:0] n_0_2_sum;
    assign n_0_2_sum = $signed({1'b0,n_0_2_sum_pos}) - $signed({1'b0,n_0_2_sum_neg});

    //relu
    wire [5:0] n_0_2, n_0_2_qrelu;
    DW01_satrnd #(10, 7, 2) USR_n_0_2 ( .din(n_0_2_sum[9:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_2_qrelu));
    assign n_0_2 = (n_0_2_sum<0) ? $unsigned({6{1'b0}}) : $unsigned(n_0_2_qrelu);

// layer: 0 - neuron: 3
    //weight abs(-8) : 4'b1000
    wire [7:0] n_0_3_po_0;
    assign n_0_3_po_0 = $unsigned(inp[3:0]) * $unsigned(4'b1000);

    //weight 2 : 2'b10
    wire [5:0] n_0_3_po_1;
    assign n_0_3_po_1 = $unsigned(inp[7:4]) * $unsigned(2'b10);

    //weight 1 : 1'b1
    wire [4:0] n_0_3_po_2;
    assign n_0_3_po_2 = $unsigned(inp[11:8]) * $unsigned(1'b1);

    //weight 8 : 4'b1000
    wire [7:0] n_0_3_po_3;
    assign n_0_3_po_3 = $unsigned(inp[15:12]) * $unsigned(4'b1000);

    //weight 6 : 3'b110
    wire [6:0] n_0_3_po_4;
    assign n_0_3_po_4 = $unsigned(inp[19:16]) * $unsigned(3'b110);

    //weight 3 : 2'b11
    wire [5:0] n_0_3_po_5;
    assign n_0_3_po_5 = $unsigned(inp[23:20]) * $unsigned(2'b11);

    //weight 4 : 3'b100
    wire [6:0] n_0_3_po_6;
    assign n_0_3_po_6 = $unsigned(inp[27:24]) * $unsigned(3'b100);

    //weight abs(-2) : 2'b10
    wire [5:0] n_0_3_po_7;
    //merging with node 1
    assign n_0_3_po_7 = n_0_1_po_7;

    //weight 6 : 3'b110
    wire [6:0] n_0_3_po_8;
    assign n_0_3_po_8 = $unsigned(inp[35:32]) * $unsigned(3'b110);

    //weight abs(-8) : 4'b1000
    wire [7:0] n_0_3_po_9;
    assign n_0_3_po_9 = $unsigned(inp[39:36]) * $unsigned(4'b1000);

    //weight abs(-3) : 2'b11
    wire [5:0] n_0_3_po_10;
    assign n_0_3_po_10 = $unsigned(inp[43:40]) * $unsigned(2'b11);

    //weight abs(-8) : 4'b1000
    wire [7:0] n_0_3_po_11;
    assign n_0_3_po_11 = $unsigned(inp[47:44]) * $unsigned(4'b1000);

    //weight abs(-2) : 2'b10
    wire [5:0] n_0_3_po_12;
    assign n_0_3_po_12 = $unsigned(inp[51:48]) * $unsigned(2'b10);

    //weight abs(-3) : 2'b11
    wire [5:0] n_0_3_po_13;
    assign n_0_3_po_13 = $unsigned(inp[55:52]) * $unsigned(2'b11);

    //weight 0 : skip
    //weight abs(-7) : 3'b111
    wire [6:0] n_0_3_po_15;
    assign n_0_3_po_15 = $unsigned(inp[63:60]) * $unsigned(3'b111);

    //accumulate positive/negative subproducts
    wire [10:0] n_0_3_sum_pos;
    assign n_0_3_sum_pos = 6'b111000 + n_0_3_po_1 + n_0_3_po_2 + n_0_3_po_3 + n_0_3_po_4 + n_0_3_po_5 + n_0_3_po_6 + n_0_3_po_8;
    wire [10:0] n_0_3_sum_neg;
    assign n_0_3_sum_neg = n_0_3_po_0 + n_0_3_po_7 + n_0_3_po_9 + n_0_3_po_10 + n_0_3_po_11 + n_0_3_po_12 + n_0_3_po_13 + n_0_3_po_15;
    wire signed [11:0] n_0_3_sum;
    assign n_0_3_sum = $signed({1'b0,n_0_3_sum_pos}) - $signed({1'b0,n_0_3_sum_neg});

    //relu
    wire [5:0] n_0_3, n_0_3_qrelu;
    DW01_satrnd #(11, 7, 2) USR_n_0_3 ( .din(n_0_3_sum[10:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_3_qrelu));
    assign n_0_3 = (n_0_3_sum<0) ? $unsigned({6{1'b0}}) : $unsigned(n_0_3_qrelu);

// layer: 0 - neuron: 4
    //weight abs(-5) : 3'b101
    wire [6:0] n_0_4_po_0;
    assign n_0_4_po_0 = $unsigned(inp[3:0]) * $unsigned(3'b101);

    //weight 9 : 4'b1001
    wire [7:0] n_0_4_po_1;
    assign n_0_4_po_1 = $unsigned(inp[7:4]) * $unsigned(4'b1001);

    //weight abs(-4) : 3'b100
    wire [6:0] n_0_4_po_2;
    assign n_0_4_po_2 = $unsigned(inp[11:8]) * $unsigned(3'b100);

    //weight 4 : 3'b100
    wire [6:0] n_0_4_po_3;
    //merging with node 0
    assign n_0_4_po_3 = n_0_0_po_3;

    //weight 1 : 1'b1
    wire [4:0] n_0_4_po_4;
    assign n_0_4_po_4 = $unsigned(inp[19:16]) * $unsigned(1'b1);

    //weight abs(-3) : 2'b11
    wire [5:0] n_0_4_po_5;
    //merging with node 3
    assign n_0_4_po_5 = n_0_3_po_5;

    //weight abs(-1) : 1'b1
    wire [4:0] n_0_4_po_6;
    assign n_0_4_po_6 = $unsigned(inp[27:24]) * $unsigned(1'b1);

    //weight abs(-5) : 3'b101
    wire [6:0] n_0_4_po_7;
    //merging with node 2
    assign n_0_4_po_7 = n_0_2_po_7;

    //weight 4 : 3'b100
    wire [6:0] n_0_4_po_8;
    //merging with node 0
    assign n_0_4_po_8 = n_0_0_po_8;

    //weight abs(-4) : 3'b100
    wire [6:0] n_0_4_po_9;
    assign n_0_4_po_9 = $unsigned(inp[39:36]) * $unsigned(3'b100);

    //weight 1 : 1'b1
    wire [4:0] n_0_4_po_10;
    assign n_0_4_po_10 = $unsigned(inp[43:40]) * $unsigned(1'b1);

    //weight 2 : 2'b10
    wire [5:0] n_0_4_po_11;
    assign n_0_4_po_11 = $unsigned(inp[47:44]) * $unsigned(2'b10);

    //weight abs(-1) : 1'b1
    wire [4:0] n_0_4_po_12;
    //merging with node 2
    assign n_0_4_po_12 = n_0_2_po_12;

    //weight 10 : 4'b1010
    wire [7:0] n_0_4_po_13;
    //merging with node 1
    assign n_0_4_po_13 = n_0_1_po_13;

    //weight abs(-2) : 2'b10
    wire [5:0] n_0_4_po_14;
    assign n_0_4_po_14 = $unsigned(inp[59:56]) * $unsigned(2'b10);

    //weight 11 : 4'b1011
    wire [7:0] n_0_4_po_15;
    assign n_0_4_po_15 = $unsigned(inp[63:60]) * $unsigned(4'b1011);

    //accumulate positive/negative subproducts
    wire [10:0] n_0_4_sum_pos;
    assign n_0_4_sum_pos = n_0_4_po_1 + n_0_4_po_3 + n_0_4_po_4 + n_0_4_po_8 + n_0_4_po_10 + n_0_4_po_11 + n_0_4_po_13 + n_0_4_po_15;
    wire [10:0] n_0_4_sum_neg;
    assign n_0_4_sum_neg = 4'b1000 + n_0_4_po_0 + n_0_4_po_2 + n_0_4_po_5 + n_0_4_po_6 + n_0_4_po_7 + n_0_4_po_9 + n_0_4_po_12 + n_0_4_po_14;
    wire signed [11:0] n_0_4_sum;
    assign n_0_4_sum = $signed({1'b0,n_0_4_sum_pos}) - $signed({1'b0,n_0_4_sum_neg});

    //relu
    wire [5:0] n_0_4, n_0_4_qrelu;
    DW01_satrnd #(11, 7, 2) USR_n_0_4 ( .din(n_0_4_sum[10:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_4_qrelu));
    assign n_0_4 = (n_0_4_sum<0) ? $unsigned({6{1'b0}}) : $unsigned(n_0_4_qrelu);

// layer: 1 - neuron: 0
    //weight 0 : skip
    //weight abs(-11) : 4'b1011
    wire [9:0] n_1_0_po_1;
    assign n_1_0_po_1 = $unsigned(n_0_1) * $unsigned(4'b1011);

    //weight abs(-56) : 6'b111000
    wire [11:0] n_1_0_po_2;
    assign n_1_0_po_2 = $unsigned(n_0_2) * $unsigned(6'b111000);

    //weight abs(-61) : 6'b111101
    wire [11:0] n_1_0_po_3;
    assign n_1_0_po_3 = $unsigned(n_0_3) * $unsigned(6'b111101);

    //weight 41 : 6'b101001
    wire [11:0] n_1_0_po_4;
    assign n_1_0_po_4 = $unsigned(n_0_4) * $unsigned(6'b101001);

    //accumulate positive/negative subproducts
    wire [13:0] n_1_0_sum_pos;
    assign n_1_0_sum_pos = 7'b1000000 + n_1_0_po_4;
    wire [13:0] n_1_0_sum_neg;
    assign n_1_0_sum_neg = n_1_0_po_1 + n_1_0_po_2 + n_1_0_po_3;
    wire signed [14:0] n_1_0_sum;
    assign n_1_0_sum = $signed({1'b0,n_1_0_sum_pos}) - $signed({1'b0,n_1_0_sum_neg});

    //linear
    wire signed [14:0] n_1_0;
    assign n_1_0 = n_1_0_sum;

// layer: 1 - neuron: 1
    //weight 5 : 3'b101
    wire [8:0] n_1_1_po_0;
    assign n_1_1_po_0 = $unsigned(n_0_0) * $unsigned(3'b101);

    //weight abs(-21) : 5'b10101
    wire [10:0] n_1_1_po_1;
    assign n_1_1_po_1 = $unsigned(n_0_1) * $unsigned(5'b10101);

    //weight abs(-40) : 6'b101000
    wire [11:0] n_1_1_po_2;
    assign n_1_1_po_2 = $unsigned(n_0_2) * $unsigned(6'b101000);

    //weight 25 : 5'b11001
    wire [10:0] n_1_1_po_3;
    assign n_1_1_po_3 = $unsigned(n_0_3) * $unsigned(5'b11001);

    //weight abs(-52) : 6'b110100
    wire [11:0] n_1_1_po_4;
    assign n_1_1_po_4 = $unsigned(n_0_4) * $unsigned(6'b110100);

    //accumulate positive/negative subproducts
    wire [13:0] n_1_1_sum_pos;
    assign n_1_1_sum_pos = 9'b111100000 + n_1_1_po_0 + n_1_1_po_3;
    wire [13:0] n_1_1_sum_neg;
    assign n_1_1_sum_neg = n_1_1_po_1 + n_1_1_po_2 + n_1_1_po_4;
    wire signed [14:0] n_1_1_sum;
    assign n_1_1_sum = $signed({1'b0,n_1_1_sum_pos}) - $signed({1'b0,n_1_1_sum_neg});

    //linear
    wire signed [14:0] n_1_1;
    assign n_1_1 = n_1_1_sum;

// layer: 1 - neuron: 2
    //weight 1 : 1'b1
    wire [6:0] n_1_2_po_0;
    assign n_1_2_po_0 = $unsigned(n_0_0) * $unsigned(1'b1);

    //weight abs(-34) : 6'b100010
    wire [11:0] n_1_2_po_1;
    assign n_1_2_po_1 = $unsigned(n_0_1) * $unsigned(6'b100010);

    //weight 32 : 6'b100000
    wire [11:0] n_1_2_po_2;
    assign n_1_2_po_2 = $unsigned(n_0_2) * $unsigned(6'b100000);

    //weight 23 : 5'b10111
    wire [10:0] n_1_2_po_3;
    assign n_1_2_po_3 = $unsigned(n_0_3) * $unsigned(5'b10111);

    //weight abs(-55) : 6'b110111
    wire [11:0] n_1_2_po_4;
    assign n_1_2_po_4 = $unsigned(n_0_4) * $unsigned(6'b110111);

    //accumulate positive/negative subproducts
    wire [13:0] n_1_2_sum_pos;
    assign n_1_2_sum_pos = n_1_2_po_0 + n_1_2_po_2 + n_1_2_po_3;
    wire [13:0] n_1_2_sum_neg;
    assign n_1_2_sum_neg = 8'b10000000 + n_1_2_po_1 + n_1_2_po_4;
    wire signed [14:0] n_1_2_sum;
    assign n_1_2_sum = $signed({1'b0,n_1_2_sum_pos}) - $signed({1'b0,n_1_2_sum_neg});

    //linear
    wire signed [14:0] n_1_2;
    assign n_1_2 = n_1_2_sum;

// layer: 1 - neuron: 3
    //weight abs(-28) : 5'b11100
    wire [10:0] n_1_3_po_0;
    assign n_1_3_po_0 = $unsigned(n_0_0) * $unsigned(5'b11100);

    //weight 9 : 4'b1001
    wire [9:0] n_1_3_po_1;
    assign n_1_3_po_1 = $unsigned(n_0_1) * $unsigned(4'b1001);

    //weight abs(-44) : 6'b101100
    wire [11:0] n_1_3_po_2;
    assign n_1_3_po_2 = $unsigned(n_0_2) * $unsigned(6'b101100);

    //weight 20 : 5'b10100
    wire [10:0] n_1_3_po_3;
    assign n_1_3_po_3 = $unsigned(n_0_3) * $unsigned(5'b10100);

    //weight abs(-1) : 1'b1
    wire [6:0] n_1_3_po_4;
    assign n_1_3_po_4 = $unsigned(n_0_4) * $unsigned(1'b1);

    //accumulate positive/negative subproducts
    wire [12:0] n_1_3_sum_pos;
    assign n_1_3_sum_pos = n_1_3_po_1 + n_1_3_po_3;
    wire [12:0] n_1_3_sum_neg;
    assign n_1_3_sum_neg = 10'b1000000000 + n_1_3_po_0 + n_1_3_po_2 + n_1_3_po_4;
    wire signed [13:0] n_1_3_sum;
    assign n_1_3_sum = $signed({1'b0,n_1_3_sum_pos}) - $signed({1'b0,n_1_3_sum_neg});

    //linear
    wire signed [13:0] n_1_3;
    assign n_1_3 = n_1_3_sum;

// layer: 1 - neuron: 4
    //weight abs(-36) : 6'b100100
    wire [11:0] n_1_4_po_0;
    assign n_1_4_po_0 = $unsigned(n_0_0) * $unsigned(6'b100100);

    //weight 15 : 4'b1111
    wire [9:0] n_1_4_po_1;
    assign n_1_4_po_1 = $unsigned(n_0_1) * $unsigned(4'b1111);

    //weight abs(-44) : 6'b101100
    wire [11:0] n_1_4_po_2;
    //merging with node 3
    assign n_1_4_po_2 = n_1_3_po_2;

    //weight abs(-32) : 6'b100000
    wire [11:0] n_1_4_po_3;
    assign n_1_4_po_3 = $unsigned(n_0_3) * $unsigned(6'b100000);

    //weight 25 : 5'b11001
    wire [10:0] n_1_4_po_4;
    assign n_1_4_po_4 = $unsigned(n_0_4) * $unsigned(5'b11001);

    //accumulate positive/negative subproducts
    wire [13:0] n_1_4_sum_pos;
    assign n_1_4_sum_pos = 9'b110100000 + n_1_4_po_1 + n_1_4_po_4;
    wire [13:0] n_1_4_sum_neg;
    assign n_1_4_sum_neg = n_1_4_po_0 + n_1_4_po_2 + n_1_4_po_3;
    wire signed [14:0] n_1_4_sum;
    assign n_1_4_sum = $signed({1'b0,n_1_4_sum_pos}) - $signed({1'b0,n_1_4_sum_neg});

    //linear
    wire signed [14:0] n_1_4;
    assign n_1_4 = n_1_4_sum;

// layer: 1 - neuron: 5
    //weight abs(-1) : 1'b1
    wire [6:0] n_1_5_po_0;
    //merging with node 2
    assign n_1_5_po_0 = n_1_2_po_0;

    //weight 18 : 5'b10010
    wire [10:0] n_1_5_po_1;
    assign n_1_5_po_1 = $unsigned(n_0_1) * $unsigned(5'b10010);

    //weight 38 : 6'b100110
    wire [11:0] n_1_5_po_2;
    assign n_1_5_po_2 = $unsigned(n_0_2) * $unsigned(6'b100110);

    //weight abs(-7) : 3'b111
    wire [8:0] n_1_5_po_3;
    assign n_1_5_po_3 = $unsigned(n_0_3) * $unsigned(3'b111);

    //weight abs(-20) : 5'b10100
    wire [10:0] n_1_5_po_4;
    assign n_1_5_po_4 = $unsigned(n_0_4) * $unsigned(5'b10100);

    //accumulate positive/negative subproducts
    wire [12:0] n_1_5_sum_pos;
    assign n_1_5_sum_pos = n_1_5_po_1 + n_1_5_po_2;
    wire [12:0] n_1_5_sum_neg;
    assign n_1_5_sum_neg = 7'b1000000 + n_1_5_po_0 + n_1_5_po_3 + n_1_5_po_4;
    wire signed [13:0] n_1_5_sum;
    assign n_1_5_sum = $signed({1'b0,n_1_5_sum_pos}) - $signed({1'b0,n_1_5_sum_neg});

    //linear
    wire signed [13:0] n_1_5;
    assign n_1_5 = n_1_5_sum;

// layer: 1 - neuron: 6
    //weight 29 : 5'b11101
    wire [10:0] n_1_6_po_0;
    assign n_1_6_po_0 = $unsigned(n_0_0) * $unsigned(5'b11101);

    //weight 6 : 3'b110
    wire [8:0] n_1_6_po_1;
    assign n_1_6_po_1 = $unsigned(n_0_1) * $unsigned(3'b110);

    //weight abs(-38) : 6'b100110
    wire [11:0] n_1_6_po_2;
    //merging with node 5
    assign n_1_6_po_2 = n_1_5_po_2;

    //weight abs(-18) : 5'b10010
    wire [10:0] n_1_6_po_3;
    assign n_1_6_po_3 = $unsigned(n_0_3) * $unsigned(5'b10010);

    //weight 4 : 3'b100
    wire [8:0] n_1_6_po_4;
    assign n_1_6_po_4 = $unsigned(n_0_4) * $unsigned(3'b100);

    //accumulate positive/negative subproducts
    wire [12:0] n_1_6_sum_pos;
    assign n_1_6_sum_pos = n_1_6_po_0 + n_1_6_po_1 + n_1_6_po_4;
    wire [12:0] n_1_6_sum_neg;
    assign n_1_6_sum_neg = 10'b1000000000 + n_1_6_po_2 + n_1_6_po_3;
    wire signed [13:0] n_1_6_sum;
    assign n_1_6_sum = $signed({1'b0,n_1_6_sum_pos}) - $signed({1'b0,n_1_6_sum_neg});

    //linear
    wire signed [13:0] n_1_6;
    assign n_1_6 = n_1_6_sum;

// layer: 1 - neuron: 7
    //weight abs(-7) : 3'b111
    wire [8:0] n_1_7_po_0;
    assign n_1_7_po_0 = $unsigned(n_0_0) * $unsigned(3'b111);

    //weight abs(-21) : 5'b10101
    wire [10:0] n_1_7_po_1;
    //merging with node 1
    assign n_1_7_po_1 = n_1_1_po_1;

    //weight abs(-15) : 4'b1111
    wire [9:0] n_1_7_po_2;
    assign n_1_7_po_2 = $unsigned(n_0_2) * $unsigned(4'b1111);

    //weight 20 : 5'b10100
    wire [10:0] n_1_7_po_3;
    //merging with node 3
    assign n_1_7_po_3 = n_1_3_po_3;

    //weight 18 : 5'b10010
    wire [10:0] n_1_7_po_4;
    assign n_1_7_po_4 = $unsigned(n_0_4) * $unsigned(5'b10010);

    //accumulate positive/negative subproducts
    wire [11:0] n_1_7_sum_pos;
    assign n_1_7_sum_pos = n_1_7_po_3 + n_1_7_po_4;
    wire [11:0] n_1_7_sum_neg;
    assign n_1_7_sum_neg = 9'b100100000 + n_1_7_po_0 + n_1_7_po_1 + n_1_7_po_2;
    wire signed [12:0] n_1_7_sum;
    assign n_1_7_sum = $signed({1'b0,n_1_7_sum_pos}) - $signed({1'b0,n_1_7_sum_neg});

    //linear
    wire signed [12:0] n_1_7;
    assign n_1_7 = n_1_7_sum;

// layer: 1 - neuron: 8
    //weight 23 : 5'b10111
    wire [10:0] n_1_8_po_0;
    assign n_1_8_po_0 = $unsigned(n_0_0) * $unsigned(5'b10111);

    //weight abs(-37) : 6'b100101
    wire [11:0] n_1_8_po_1;
    assign n_1_8_po_1 = $unsigned(n_0_1) * $unsigned(6'b100101);

    //weight abs(-28) : 5'b11100
    wire [10:0] n_1_8_po_2;
    assign n_1_8_po_2 = $unsigned(n_0_2) * $unsigned(5'b11100);

    //weight abs(-2) : 2'b10
    wire [7:0] n_1_8_po_3;
    assign n_1_8_po_3 = $unsigned(n_0_3) * $unsigned(2'b10);

    //weight 13 : 4'b1101
    wire [9:0] n_1_8_po_4;
    assign n_1_8_po_4 = $unsigned(n_0_4) * $unsigned(4'b1101);

    //accumulate positive/negative subproducts
    wire [12:0] n_1_8_sum_pos;
    assign n_1_8_sum_pos = 9'b110100000 + n_1_8_po_0 + n_1_8_po_4;
    wire [12:0] n_1_8_sum_neg;
    assign n_1_8_sum_neg = n_1_8_po_1 + n_1_8_po_2 + n_1_8_po_3;
    wire signed [13:0] n_1_8_sum;
    assign n_1_8_sum = $signed({1'b0,n_1_8_sum_pos}) - $signed({1'b0,n_1_8_sum_neg});

    //linear
    wire signed [13:0] n_1_8;
    assign n_1_8 = n_1_8_sum;

// layer: 1 - neuron: 9
    //weight abs(-64) : 7'b1000000
    wire [12:0] n_1_9_po_0;
    assign n_1_9_po_0 = $unsigned(n_0_0) * $unsigned(7'b1000000);

    //weight 31 : 5'b11111
    wire [10:0] n_1_9_po_1;
    assign n_1_9_po_1 = $unsigned(n_0_1) * $unsigned(5'b11111);

    //weight 50 : 6'b110010
    wire [11:0] n_1_9_po_2;
    assign n_1_9_po_2 = $unsigned(n_0_2) * $unsigned(6'b110010);

    //weight abs(-21) : 5'b10101
    wire [10:0] n_1_9_po_3;
    assign n_1_9_po_3 = $unsigned(n_0_3) * $unsigned(5'b10101);

    //weight abs(-32) : 6'b100000
    wire [11:0] n_1_9_po_4;
    assign n_1_9_po_4 = $unsigned(n_0_4) * $unsigned(6'b100000);

    //accumulate positive/negative subproducts
    wire [13:0] n_1_9_sum_pos;
    assign n_1_9_sum_pos = 9'b101100000 + n_1_9_po_1 + n_1_9_po_2;
    wire [13:0] n_1_9_sum_neg;
    assign n_1_9_sum_neg = n_1_9_po_0 + n_1_9_po_3 + n_1_9_po_4;
    wire signed [14:0] n_1_9_sum;
    assign n_1_9_sum = $signed({1'b0,n_1_9_sum_pos}) - $signed({1'b0,n_1_9_sum_neg});

    //linear
    wire signed [14:0] n_1_9;
    assign n_1_9 = n_1_9_sum;

// argmax: 10 classes, need 4 bits
// argmax inp: n_1_0, n_1_1, n_1_2, n_1_3, n_1_4, n_1_5, n_1_6, n_1_7, n_1_8, n_1_9
    //comp level 0
    wire cmp_0_0;
    wire signed [14:0] argmax_val_0_0;
    wire [3:0] argmax_idx_0_0;
    assign {cmp_0_0} = ( n_1_0 >= n_1_1 );
    assign {argmax_val_0_0} = ( cmp_0_0 ) ? n_1_0 : n_1_1;
    assign {argmax_idx_0_0} = ( cmp_0_0 ) ? 4'b0000 : 4'b0001;

    wire cmp_0_2;
    wire signed [14:0] argmax_val_0_2;
    wire [3:0] argmax_idx_0_2;
    assign {cmp_0_2} = ( n_1_2 >= n_1_3 );
    assign {argmax_val_0_2} = ( cmp_0_2 ) ? n_1_2 : n_1_3;
    assign {argmax_idx_0_2} = ( cmp_0_2 ) ? 4'b0010 : 4'b0011;

    wire cmp_0_4;
    wire signed [14:0] argmax_val_0_4;
    wire [3:0] argmax_idx_0_4;
    assign {cmp_0_4} = ( n_1_4 >= n_1_5 );
    assign {argmax_val_0_4} = ( cmp_0_4 ) ? n_1_4 : n_1_5;
    assign {argmax_idx_0_4} = ( cmp_0_4 ) ? 4'b0100 : 4'b0101;

    wire cmp_0_6;
    wire signed [14:0] argmax_val_0_6;
    wire [3:0] argmax_idx_0_6;
    assign {cmp_0_6} = ( n_1_6 >= n_1_7 );
    assign {argmax_val_0_6} = ( cmp_0_6 ) ? n_1_6 : n_1_7;
    assign {argmax_idx_0_6} = ( cmp_0_6 ) ? 4'b0110 : 4'b0111;

    wire cmp_0_8;
    wire signed [14:0] argmax_val_0_8;
    wire [3:0] argmax_idx_0_8;
    assign {cmp_0_8} = ( n_1_8 >= n_1_9 );
    assign {argmax_val_0_8} = ( cmp_0_8 ) ? n_1_8 : n_1_9;
    assign {argmax_idx_0_8} = ( cmp_0_8 ) ? 4'b1000 : 4'b1001;

    //comp level 1
    wire cmp_1_0;
    wire signed [14:0] argmax_val_1_0;
    wire [3:0] argmax_idx_1_0;
    assign {cmp_1_0} = ( argmax_val_0_0 >= argmax_val_0_2 );
    assign {argmax_val_1_0} = ( cmp_1_0 ) ? argmax_val_0_0 : argmax_val_0_2;
    assign {argmax_idx_1_0} = ( cmp_1_0 ) ? argmax_idx_0_0 : argmax_idx_0_2;

    wire cmp_1_2;
    wire signed [14:0] argmax_val_1_2;
    wire [3:0] argmax_idx_1_2;
    assign {cmp_1_2} = ( argmax_val_0_4 >= argmax_val_0_6 );
    assign {argmax_val_1_2} = ( cmp_1_2 ) ? argmax_val_0_4 : argmax_val_0_6;
    assign {argmax_idx_1_2} = ( cmp_1_2 ) ? argmax_idx_0_4 : argmax_idx_0_6;

    //comp level 2
    wire cmp_2_0;
    wire signed [14:0] argmax_val_2_0;
    wire [3:0] argmax_idx_2_0;
    assign {cmp_2_0} = ( argmax_val_1_0 >= argmax_val_1_2 );
    assign {argmax_val_2_0} = ( cmp_2_0 ) ? argmax_val_1_0 : argmax_val_1_2;
    assign {argmax_idx_2_0} = ( cmp_2_0 ) ? argmax_idx_1_0 : argmax_idx_1_2;

    //comp level 3
    wire cmp_3_0;
    wire signed [14:0] argmax_val_3_0;
    wire [3:0] argmax_idx_3_0;
    assign {cmp_3_0} = ( argmax_val_2_0 >= argmax_val_0_8 );
    assign {argmax_val_3_0} = ( cmp_3_0 ) ? argmax_val_2_0 : argmax_val_0_8;
    assign {argmax_idx_3_0} = ( cmp_3_0 ) ? argmax_idx_2_0 : argmax_idx_0_8;

    assign out = argmax_idx_3_0;

endmodule
