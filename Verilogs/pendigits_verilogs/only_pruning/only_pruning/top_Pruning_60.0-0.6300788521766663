//weights: [[[0, 0, 0, 0, 0, 0, -18, 0, 0, -22, 0, -24, 0, 14, -43, 19], [29, 15, 0, 0, 0, 0, 0, 0, 15, 0, 37, 0, 16, -38, -36, -41], [0, 0, -22, 0, 34, 0, 0, -17, -41, 0, 0, 0, 0, 20, 31, 0], [-21, 0, 0, 32, 32, 0, 17, 0, 16, -33, 0, -38, 0, 0, 0, -24], [0, 32, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 28, 0, 39]], [[0, 0, -63, -62, 25], [0, 0, -32, 0, -55], [0, -39, 47, 0, -43], [0, 0, -50, 0, 0], [-40, 0, -43, -16, 0], [0, 0, 16, 0, 0], [26, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, -39, -18, 0, 0], [-64, 18, 30, 0, -45]]]
//intercepts: [[61, -22, -18, 27, -11], [-31, 63, 24, -23, 63, -46, -64, -14, 44, -4]]
module top (inp, out);
input [63:0] inp;
output [3:0] out;

// layer: 0 - neuron: 0
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-18) : 5'b10010
    wire [8:0] n_0_0_po_6;
    assign n_0_0_po_6 = $unsigned(inp[27:24]) * $unsigned(5'b10010);

    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-22) : 5'b10110
    wire [8:0] n_0_0_po_9;
    assign n_0_0_po_9 = $unsigned(inp[39:36]) * $unsigned(5'b10110);

    //weight 0 : skip
    //weight abs(-24) : 5'b11000
    wire [8:0] n_0_0_po_11;
    assign n_0_0_po_11 = $unsigned(inp[47:44]) * $unsigned(5'b11000);

    //weight 0 : skip
    //weight 14 : 4'b1110
    wire [7:0] n_0_0_po_13;
    assign n_0_0_po_13 = $unsigned(inp[55:52]) * $unsigned(4'b1110);

    //weight abs(-43) : 6'b101011
    wire [9:0] n_0_0_po_14;
    assign n_0_0_po_14 = $unsigned(inp[59:56]) * $unsigned(6'b101011);

    //weight 19 : 5'b10011
    wire [8:0] n_0_0_po_15;
    assign n_0_0_po_15 = $unsigned(inp[63:60]) * $unsigned(5'b10011);

    //accumulate positive/negative subproducts
    wire [10:0] n_0_0_sum_pos;
    assign n_0_0_sum_pos = 9'b111101000 + n_0_0_po_13 + n_0_0_po_15;
    wire [11:0] n_0_0_sum_neg;
    assign n_0_0_sum_neg = n_0_0_po_6 + n_0_0_po_9 + n_0_0_po_11 + n_0_0_po_14;
    wire signed [12:0] n_0_0_sum;
    assign n_0_0_sum = $signed({1'b0,n_0_0_sum_pos}) - $signed({1'b0,n_0_0_sum_neg});

    //relu
    wire [7:0] n_0_0, n_0_0_qrelu;
    DW01_satrnd #(12, 9, 2) USR_n_0_0 ( .din(n_0_0_sum[11:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_0_qrelu));
    assign n_0_0 = (n_0_0_sum<0) ? $unsigned({8{1'b0}}) : $unsigned(n_0_0_qrelu);

// layer: 0 - neuron: 1
    //weight 29 : 5'b11101
    wire [8:0] n_0_1_po_0;
    assign n_0_1_po_0 = $unsigned(inp[3:0]) * $unsigned(5'b11101);

    //weight 15 : 4'b1111
    wire [7:0] n_0_1_po_1;
    assign n_0_1_po_1 = $unsigned(inp[7:4]) * $unsigned(4'b1111);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 15 : 4'b1111
    wire [7:0] n_0_1_po_8;
    assign n_0_1_po_8 = $unsigned(inp[35:32]) * $unsigned(4'b1111);

    //weight 0 : skip
    //weight 37 : 6'b100101
    wire [9:0] n_0_1_po_10;
    assign n_0_1_po_10 = $unsigned(inp[43:40]) * $unsigned(6'b100101);

    //weight 0 : skip
    //weight 16 : 5'b10000
    wire [8:0] n_0_1_po_12;
    assign n_0_1_po_12 = $unsigned(inp[51:48]) * $unsigned(5'b10000);

    //weight abs(-38) : 6'b100110
    wire [9:0] n_0_1_po_13;
    assign n_0_1_po_13 = $unsigned(inp[55:52]) * $unsigned(6'b100110);

    //weight abs(-36) : 6'b100100
    wire [9:0] n_0_1_po_14;
    assign n_0_1_po_14 = $unsigned(inp[59:56]) * $unsigned(6'b100100);

    //weight abs(-41) : 6'b101001
    wire [9:0] n_0_1_po_15;
    assign n_0_1_po_15 = $unsigned(inp[63:60]) * $unsigned(6'b101001);

    //accumulate positive/negative subproducts
    wire [11:0] n_0_1_sum_pos;
    assign n_0_1_sum_pos = n_0_1_po_0 + n_0_1_po_1 + n_0_1_po_8 + n_0_1_po_10 + n_0_1_po_12;
    wire [11:0] n_0_1_sum_neg;
    assign n_0_1_sum_neg = 8'b10110000 + n_0_1_po_13 + n_0_1_po_14 + n_0_1_po_15;
    wire signed [12:0] n_0_1_sum;
    assign n_0_1_sum = $signed({1'b0,n_0_1_sum_pos}) - $signed({1'b0,n_0_1_sum_neg});

    //relu
    wire [7:0] n_0_1, n_0_1_qrelu;
    DW01_satrnd #(12, 9, 2) USR_n_0_1 ( .din(n_0_1_sum[11:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_1_qrelu));
    assign n_0_1 = (n_0_1_sum<0) ? $unsigned({8{1'b0}}) : $unsigned(n_0_1_qrelu);

// layer: 0 - neuron: 2
    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-22) : 5'b10110
    wire [8:0] n_0_2_po_2;
    assign n_0_2_po_2 = $unsigned(inp[11:8]) * $unsigned(5'b10110);

    //weight 0 : skip
    //weight 34 : 6'b100010
    wire [9:0] n_0_2_po_4;
    assign n_0_2_po_4 = $unsigned(inp[19:16]) * $unsigned(6'b100010);

    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-17) : 5'b10001
    wire [8:0] n_0_2_po_7;
    assign n_0_2_po_7 = $unsigned(inp[31:28]) * $unsigned(5'b10001);

    //weight abs(-41) : 6'b101001
    wire [9:0] n_0_2_po_8;
    assign n_0_2_po_8 = $unsigned(inp[35:32]) * $unsigned(6'b101001);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 20 : 5'b10100
    wire [8:0] n_0_2_po_13;
    assign n_0_2_po_13 = $unsigned(inp[55:52]) * $unsigned(5'b10100);

    //weight 31 : 5'b11111
    wire [8:0] n_0_2_po_14;
    assign n_0_2_po_14 = $unsigned(inp[59:56]) * $unsigned(5'b11111);

    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [10:0] n_0_2_sum_pos;
    assign n_0_2_sum_pos = n_0_2_po_4 + n_0_2_po_13 + n_0_2_po_14;
    wire [11:0] n_0_2_sum_neg;
    assign n_0_2_sum_neg = 8'b10010000 + n_0_2_po_2 + n_0_2_po_7 + n_0_2_po_8;
    wire signed [12:0] n_0_2_sum;
    assign n_0_2_sum = $signed({1'b0,n_0_2_sum_pos}) - $signed({1'b0,n_0_2_sum_neg});

    //relu
    wire [7:0] n_0_2, n_0_2_qrelu;
    DW01_satrnd #(12, 9, 2) USR_n_0_2 ( .din(n_0_2_sum[11:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_2_qrelu));
    assign n_0_2 = (n_0_2_sum<0) ? $unsigned({8{1'b0}}) : $unsigned(n_0_2_qrelu);

// layer: 0 - neuron: 3
    //weight abs(-21) : 5'b10101
    wire [8:0] n_0_3_po_0;
    assign n_0_3_po_0 = $unsigned(inp[3:0]) * $unsigned(5'b10101);

    //weight 0 : skip
    //weight 0 : skip
    //weight 32 : 6'b100000
    wire [9:0] n_0_3_po_3;
    assign n_0_3_po_3 = $unsigned(inp[15:12]) * $unsigned(6'b100000);

    //weight 32 : 6'b100000
    wire [9:0] n_0_3_po_4;
    assign n_0_3_po_4 = $unsigned(inp[19:16]) * $unsigned(6'b100000);

    //weight 0 : skip
    //weight 17 : 5'b10001
    wire [8:0] n_0_3_po_6;
    assign n_0_3_po_6 = $unsigned(inp[27:24]) * $unsigned(5'b10001);

    //weight 0 : skip
    //weight 16 : 5'b10000
    wire [8:0] n_0_3_po_8;
    assign n_0_3_po_8 = $unsigned(inp[35:32]) * $unsigned(5'b10000);

    //weight abs(-33) : 6'b100001
    wire [9:0] n_0_3_po_9;
    assign n_0_3_po_9 = $unsigned(inp[39:36]) * $unsigned(6'b100001);

    //weight 0 : skip
    //weight abs(-38) : 6'b100110
    wire [9:0] n_0_3_po_11;
    assign n_0_3_po_11 = $unsigned(inp[47:44]) * $unsigned(6'b100110);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-24) : 5'b11000
    wire [8:0] n_0_3_po_15;
    assign n_0_3_po_15 = $unsigned(inp[63:60]) * $unsigned(5'b11000);

    //accumulate positive/negative subproducts
    wire [11:0] n_0_3_sum_pos;
    assign n_0_3_sum_pos = 8'b11011000 + n_0_3_po_3 + n_0_3_po_4 + n_0_3_po_6 + n_0_3_po_8;
    wire [11:0] n_0_3_sum_neg;
    assign n_0_3_sum_neg = n_0_3_po_0 + n_0_3_po_9 + n_0_3_po_11 + n_0_3_po_15;
    wire signed [12:0] n_0_3_sum;
    assign n_0_3_sum = $signed({1'b0,n_0_3_sum_pos}) - $signed({1'b0,n_0_3_sum_neg});

    //relu
    wire [7:0] n_0_3, n_0_3_qrelu;
    DW01_satrnd #(12, 9, 2) USR_n_0_3 ( .din(n_0_3_sum[11:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_3_qrelu));
    assign n_0_3 = (n_0_3_sum<0) ? $unsigned({8{1'b0}}) : $unsigned(n_0_3_qrelu);

// layer: 0 - neuron: 4
    //weight 0 : skip
    //weight 32 : 6'b100000
    wire [9:0] n_0_4_po_1;
    assign n_0_4_po_1 = $unsigned(inp[7:4]) * $unsigned(6'b100000);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-20) : 5'b10100
    wire [8:0] n_0_4_po_7;
    assign n_0_4_po_7 = $unsigned(inp[31:28]) * $unsigned(5'b10100);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 28 : 5'b11100
    wire [8:0] n_0_4_po_13;
    assign n_0_4_po_13 = $unsigned(inp[55:52]) * $unsigned(5'b11100);

    //weight 0 : skip
    //weight 39 : 6'b100111
    wire [9:0] n_0_4_po_15;
    assign n_0_4_po_15 = $unsigned(inp[63:60]) * $unsigned(6'b100111);

    //accumulate positive/negative subproducts
    wire [11:0] n_0_4_sum_pos;
    assign n_0_4_sum_pos = n_0_4_po_1 + n_0_4_po_13 + n_0_4_po_15;
    wire [9:0] n_0_4_sum_neg;
    assign n_0_4_sum_neg = 7'b1011000 + n_0_4_po_7;
    wire signed [12:0] n_0_4_sum;
    assign n_0_4_sum = $signed({1'b0,n_0_4_sum_pos}) - $signed({1'b0,n_0_4_sum_neg});

    //relu
    wire [7:0] n_0_4, n_0_4_qrelu;
    DW01_satrnd #(12, 9, 2) USR_n_0_4 ( .din(n_0_4_sum[11:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_4_qrelu));
    assign n_0_4 = (n_0_4_sum<0) ? $unsigned({8{1'b0}}) : $unsigned(n_0_4_qrelu);

// layer: 1 - neuron: 0
    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-63) : 6'b111111
    wire [13:0] n_1_0_po_2;
    assign n_1_0_po_2 = $unsigned(n_0_2) * $unsigned(6'b111111);

    //weight abs(-62) : 6'b111110
    wire [13:0] n_1_0_po_3;
    assign n_1_0_po_3 = $unsigned(n_0_3) * $unsigned(6'b111110);

    //weight 25 : 5'b11001
    wire [12:0] n_1_0_po_4;
    assign n_1_0_po_4 = $unsigned(n_0_4) * $unsigned(5'b11001);

    //accumulate positive/negative subproducts
    wire [12:0] n_1_0_sum_pos;
    assign n_1_0_sum_pos = n_1_0_po_4;
    wire [15:0] n_1_0_sum_neg;
    assign n_1_0_sum_neg = 10'b1111100000 + n_1_0_po_2 + n_1_0_po_3;
    wire signed [16:0] n_1_0_sum;
    assign n_1_0_sum = $signed({1'b0,n_1_0_sum_pos}) - $signed({1'b0,n_1_0_sum_neg});

    //linear
    wire signed [16:0] n_1_0;
    assign n_1_0 = n_1_0_sum;

// layer: 1 - neuron: 1
    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-32) : 6'b100000
    wire [13:0] n_1_1_po_2;
    assign n_1_1_po_2 = $unsigned(n_0_2) * $unsigned(6'b100000);

    //weight 0 : skip
    //weight abs(-55) : 6'b110111
    wire [13:0] n_1_1_po_4;
    assign n_1_1_po_4 = $unsigned(n_0_4) * $unsigned(6'b110111);

    //accumulate positive/negative subproducts
    wire [10:0] n_1_1_sum_pos;
    assign n_1_1_sum_pos = 11'b11111100000;
    wire [14:0] n_1_1_sum_neg;
    assign n_1_1_sum_neg = n_1_1_po_2 + n_1_1_po_4;
    wire signed [15:0] n_1_1_sum;
    assign n_1_1_sum = $signed({1'b0,n_1_1_sum_pos}) - $signed({1'b0,n_1_1_sum_neg});

    //linear
    wire signed [15:0] n_1_1;
    assign n_1_1 = n_1_1_sum;

// layer: 1 - neuron: 2
    //weight 0 : skip
    //weight abs(-39) : 6'b100111
    wire [13:0] n_1_2_po_1;
    assign n_1_2_po_1 = $unsigned(n_0_1) * $unsigned(6'b100111);

    //weight 47 : 6'b101111
    wire [13:0] n_1_2_po_2;
    assign n_1_2_po_2 = $unsigned(n_0_2) * $unsigned(6'b101111);

    //weight 0 : skip
    //weight abs(-43) : 6'b101011
    wire [13:0] n_1_2_po_4;
    assign n_1_2_po_4 = $unsigned(n_0_4) * $unsigned(6'b101011);

    //accumulate positive/negative subproducts
    wire [14:0] n_1_2_sum_pos;
    assign n_1_2_sum_pos = 10'b1100000000 + n_1_2_po_2;
    wire [14:0] n_1_2_sum_neg;
    assign n_1_2_sum_neg = n_1_2_po_1 + n_1_2_po_4;
    wire signed [15:0] n_1_2_sum;
    assign n_1_2_sum = $signed({1'b0,n_1_2_sum_pos}) - $signed({1'b0,n_1_2_sum_neg});

    //linear
    wire signed [15:0] n_1_2;
    assign n_1_2 = n_1_2_sum;

// layer: 1 - neuron: 3
    //weight 0 : skip
    //weight 0 : skip
    //weight abs(-50) : 6'b110010
    wire [13:0] n_1_3_po_2;
    assign n_1_3_po_2 = $unsigned(n_0_2) * $unsigned(6'b110010);

    //weight 0 : skip
    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [14:0] n_1_3_sum_neg;
    assign n_1_3_sum_neg = 10'b1011100000 + n_1_3_po_2;

    //WARN: only negative weights with linear. Negate.
    wire signed [15:0] n_1_3_sum;
    assign n_1_3_sum = -$signed({1'b0,n_1_3_sum_neg});

    //linear
    wire signed [15:0] n_1_3;
    assign n_1_3 = n_1_3_sum;

// layer: 1 - neuron: 4
    //weight abs(-40) : 6'b101000
    wire [13:0] n_1_4_po_0;
    assign n_1_4_po_0 = $unsigned(n_0_0) * $unsigned(6'b101000);

    //weight 0 : skip
    //weight abs(-43) : 6'b101011
    wire [13:0] n_1_4_po_2;
    assign n_1_4_po_2 = $unsigned(n_0_2) * $unsigned(6'b101011);

    //weight abs(-16) : 5'b10000
    wire [12:0] n_1_4_po_3;
    assign n_1_4_po_3 = $unsigned(n_0_3) * $unsigned(5'b10000);

    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [10:0] n_1_4_sum_pos;
    assign n_1_4_sum_pos = 11'b11111100000;
    wire [15:0] n_1_4_sum_neg;
    assign n_1_4_sum_neg = n_1_4_po_0 + n_1_4_po_2 + n_1_4_po_3;
    wire signed [16:0] n_1_4_sum;
    assign n_1_4_sum = $signed({1'b0,n_1_4_sum_pos}) - $signed({1'b0,n_1_4_sum_neg});

    //linear
    wire signed [16:0] n_1_4;
    assign n_1_4 = n_1_4_sum;

// layer: 1 - neuron: 5
    //weight 0 : skip
    //weight 0 : skip
    //weight 16 : 5'b10000
    wire [12:0] n_1_5_po_2;
    assign n_1_5_po_2 = $unsigned(n_0_2) * $unsigned(5'b10000);

    //weight 0 : skip
    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [12:0] n_1_5_sum_pos;
    assign n_1_5_sum_pos = n_1_5_po_2;
    wire [10:0] n_1_5_sum_neg;
    assign n_1_5_sum_neg = 11'b10111000000;
    wire signed [13:0] n_1_5_sum;
    assign n_1_5_sum = $signed({1'b0,n_1_5_sum_pos}) - $signed({1'b0,n_1_5_sum_neg});

    //linear
    wire signed [13:0] n_1_5;
    assign n_1_5 = n_1_5_sum;

// layer: 1 - neuron: 6
    //weight 26 : 5'b11010
    wire [12:0] n_1_6_po_0;
    assign n_1_6_po_0 = $unsigned(n_0_0) * $unsigned(5'b11010);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [12:0] n_1_6_sum_pos;
    assign n_1_6_sum_pos = n_1_6_po_0;
    wire [11:0] n_1_6_sum_neg;
    assign n_1_6_sum_neg = 12'b100000000000;
    wire signed [13:0] n_1_6_sum;
    assign n_1_6_sum = $signed({1'b0,n_1_6_sum_pos}) - $signed({1'b0,n_1_6_sum_neg});

    //linear
    wire signed [13:0] n_1_6;
    assign n_1_6 = n_1_6_sum;

// layer: 1 - neuron: 7
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [8:0] n_1_7_sum_neg;
    assign n_1_7_sum_neg = 9'b111000000;

    //WARN: only negative weights with linear. Negate.
    wire signed [9:0] n_1_7_sum;
    assign n_1_7_sum = -$signed({1'b0,n_1_7_sum_neg});

    //linear
    wire signed [9:0] n_1_7;
    assign n_1_7 = n_1_7_sum;

// layer: 1 - neuron: 8
    //weight 0 : skip
    //weight abs(-39) : 6'b100111
    wire [13:0] n_1_8_po_1;
    //merging with node 2
    assign n_1_8_po_1 = n_1_2_po_1;

    //weight abs(-18) : 5'b10010
    wire [12:0] n_1_8_po_2;
    assign n_1_8_po_2 = $unsigned(n_0_2) * $unsigned(5'b10010);

    //weight 0 : skip
    //weight 0 : skip
    //accumulate positive/negative subproducts
    wire [10:0] n_1_8_sum_pos;
    assign n_1_8_sum_pos = 11'b10110000000;
    wire [14:0] n_1_8_sum_neg;
    assign n_1_8_sum_neg = n_1_8_po_1 + n_1_8_po_2;
    wire signed [15:0] n_1_8_sum;
    assign n_1_8_sum = $signed({1'b0,n_1_8_sum_pos}) - $signed({1'b0,n_1_8_sum_neg});

    //linear
    wire signed [15:0] n_1_8;
    assign n_1_8 = n_1_8_sum;

// layer: 1 - neuron: 9
    //weight abs(-64) : 7'b1000000
    wire [14:0] n_1_9_po_0;
    assign n_1_9_po_0 = $unsigned(n_0_0) * $unsigned(7'b1000000);

    //weight 18 : 5'b10010
    wire [12:0] n_1_9_po_1;
    assign n_1_9_po_1 = $unsigned(n_0_1) * $unsigned(5'b10010);

    //weight 30 : 5'b11110
    wire [12:0] n_1_9_po_2;
    assign n_1_9_po_2 = $unsigned(n_0_2) * $unsigned(5'b11110);

    //weight 0 : skip
    //weight abs(-45) : 6'b101101
    wire [13:0] n_1_9_po_4;
    assign n_1_9_po_4 = $unsigned(n_0_4) * $unsigned(6'b101101);

    //accumulate positive/negative subproducts
    wire [13:0] n_1_9_sum_pos;
    assign n_1_9_sum_pos = n_1_9_po_1 + n_1_9_po_2;
    wire [15:0] n_1_9_sum_neg;
    assign n_1_9_sum_neg = 8'b10000000 + n_1_9_po_0 + n_1_9_po_4;
    wire signed [16:0] n_1_9_sum;
    assign n_1_9_sum = $signed({1'b0,n_1_9_sum_pos}) - $signed({1'b0,n_1_9_sum_neg});

    //linear
    wire signed [16:0] n_1_9;
    assign n_1_9 = n_1_9_sum;

// argmax: 10 classes, need 4 bits
// argmax inp: n_1_0, n_1_1, n_1_2, n_1_3, n_1_4, n_1_5, n_1_6, n_1_7, n_1_8, n_1_9
    //comp level 0
    wire cmp_0_0;
    wire signed [16:0] argmax_val_0_0;
    wire [3:0] argmax_idx_0_0;
    assign {cmp_0_0} = ( n_1_0 >= n_1_1 );
    assign {argmax_val_0_0} = ( cmp_0_0 ) ? n_1_0 : n_1_1;
    assign {argmax_idx_0_0} = ( cmp_0_0 ) ? 4'b0000 : 4'b0001;

    wire cmp_0_2;
    wire signed [16:0] argmax_val_0_2;
    wire [3:0] argmax_idx_0_2;
    assign {cmp_0_2} = ( n_1_2 >= n_1_3 );
    assign {argmax_val_0_2} = ( cmp_0_2 ) ? n_1_2 : n_1_3;
    assign {argmax_idx_0_2} = ( cmp_0_2 ) ? 4'b0010 : 4'b0011;

    wire cmp_0_4;
    wire signed [16:0] argmax_val_0_4;
    wire [3:0] argmax_idx_0_4;
    assign {cmp_0_4} = ( n_1_4 >= n_1_5 );
    assign {argmax_val_0_4} = ( cmp_0_4 ) ? n_1_4 : n_1_5;
    assign {argmax_idx_0_4} = ( cmp_0_4 ) ? 4'b0100 : 4'b0101;

    wire cmp_0_6;
    wire signed [16:0] argmax_val_0_6;
    wire [3:0] argmax_idx_0_6;
    assign {cmp_0_6} = ( n_1_6 >= n_1_7 );
    assign {argmax_val_0_6} = ( cmp_0_6 ) ? n_1_6 : n_1_7;
    assign {argmax_idx_0_6} = ( cmp_0_6 ) ? 4'b0110 : 4'b0111;

    wire cmp_0_8;
    wire signed [16:0] argmax_val_0_8;
    wire [3:0] argmax_idx_0_8;
    assign {cmp_0_8} = ( n_1_8 >= n_1_9 );
    assign {argmax_val_0_8} = ( cmp_0_8 ) ? n_1_8 : n_1_9;
    assign {argmax_idx_0_8} = ( cmp_0_8 ) ? 4'b1000 : 4'b1001;

    //comp level 1
    wire cmp_1_0;
    wire signed [16:0] argmax_val_1_0;
    wire [3:0] argmax_idx_1_0;
    assign {cmp_1_0} = ( argmax_val_0_0 >= argmax_val_0_2 );
    assign {argmax_val_1_0} = ( cmp_1_0 ) ? argmax_val_0_0 : argmax_val_0_2;
    assign {argmax_idx_1_0} = ( cmp_1_0 ) ? argmax_idx_0_0 : argmax_idx_0_2;

    wire cmp_1_2;
    wire signed [16:0] argmax_val_1_2;
    wire [3:0] argmax_idx_1_2;
    assign {cmp_1_2} = ( argmax_val_0_4 >= argmax_val_0_6 );
    assign {argmax_val_1_2} = ( cmp_1_2 ) ? argmax_val_0_4 : argmax_val_0_6;
    assign {argmax_idx_1_2} = ( cmp_1_2 ) ? argmax_idx_0_4 : argmax_idx_0_6;

    //comp level 2
    wire cmp_2_0;
    wire signed [16:0] argmax_val_2_0;
    wire [3:0] argmax_idx_2_0;
    assign {cmp_2_0} = ( argmax_val_1_0 >= argmax_val_1_2 );
    assign {argmax_val_2_0} = ( cmp_2_0 ) ? argmax_val_1_0 : argmax_val_1_2;
    assign {argmax_idx_2_0} = ( cmp_2_0 ) ? argmax_idx_1_0 : argmax_idx_1_2;

    //comp level 3
    wire cmp_3_0;
    wire signed [16:0] argmax_val_3_0;
    wire [3:0] argmax_idx_3_0;
    assign {cmp_3_0} = ( argmax_val_2_0 >= argmax_val_0_8 );
    assign {argmax_val_3_0} = ( cmp_3_0 ) ? argmax_val_2_0 : argmax_val_0_8;
    assign {argmax_idx_3_0} = ( cmp_3_0 ) ? argmax_idx_2_0 : argmax_idx_0_8;

    assign out = argmax_idx_3_0;

endmodule
