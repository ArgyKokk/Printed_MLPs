//weights: [[[127, -79, 37, -55, 6, -128], [63, -118, 44, 82, 93, 105], [104, -51, 18, -42, -18, 127]], [[127, -123, -112], [-49, 25, 123], [91, 51, -128]]]
//intercepts: [[63, -22, 45], [-45, -63, -4]]
module top (inp, out);
input [23:0] inp;
output [1:0] out;

// layer: 0 - neuron: 0
    //weight 127 : 7'b1111111
    wire [10:0] n_0_0_po_0;
    assign n_0_0_po_0 = $unsigned(inp[3:0]) * $unsigned(7'b1111111);

    //weight abs(-79) : 7'b1001111
    wire [10:0] n_0_0_po_1;
    assign n_0_0_po_1 = $unsigned(inp[7:4]) * $unsigned(7'b1001111);

    //weight 37 : 6'b100101
    wire [9:0] n_0_0_po_2;
    assign n_0_0_po_2 = $unsigned(inp[11:8]) * $unsigned(6'b100101);

    //weight abs(-55) : 6'b110111
    wire [9:0] n_0_0_po_3;
    assign n_0_0_po_3 = $unsigned(inp[15:12]) * $unsigned(6'b110111);

    //weight 6 : 3'b110
    wire [6:0] n_0_0_po_4;
    assign n_0_0_po_4 = $unsigned(inp[19:16]) * $unsigned(3'b110);

    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_0_po_5;
    assign n_0_0_po_5 = $unsigned(inp[23:20]) * $unsigned(8'b10000000);

    //accumulate positive/negative subproducts
    wire [12:0] n_0_0_sum_pos;
    assign n_0_0_sum_pos = 9'b111111000 + n_0_0_po_0 + n_0_0_po_2 + n_0_0_po_4;
    wire [12:0] n_0_0_sum_neg;
    assign n_0_0_sum_neg = n_0_0_po_1 + n_0_0_po_3 + n_0_0_po_5;
    wire signed [13:0] n_0_0_sum;
    assign n_0_0_sum = $signed({1'b0,n_0_0_sum_pos}) - $signed({1'b0,n_0_0_sum_neg});

    //relu
    wire [9:0] n_0_0, n_0_0_qrelu;
    DW01_satrnd #(13, 10, 1) USR_n_0_0 ( .din(n_0_0_sum[12:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_0_qrelu));
    assign n_0_0 = (n_0_0_sum<0) ? $unsigned({10{1'b0}}) : $unsigned(n_0_0_qrelu);

// layer: 0 - neuron: 1
    //weight 63 : 6'b111111
    wire [9:0] n_0_1_po_0;
    assign n_0_1_po_0 = $unsigned(inp[3:0]) * $unsigned(6'b111111);

    //weight abs(-118) : 7'b1110110
    wire [10:0] n_0_1_po_1;
    assign n_0_1_po_1 = $unsigned(inp[7:4]) * $unsigned(7'b1110110);

    //weight 44 : 6'b101100
    wire [9:0] n_0_1_po_2;
    assign n_0_1_po_2 = $unsigned(inp[11:8]) * $unsigned(6'b101100);

    //weight 82 : 7'b1010010
    wire [10:0] n_0_1_po_3;
    assign n_0_1_po_3 = $unsigned(inp[15:12]) * $unsigned(7'b1010010);

    //weight 93 : 7'b1011101
    wire [10:0] n_0_1_po_4;
    assign n_0_1_po_4 = $unsigned(inp[19:16]) * $unsigned(7'b1011101);

    //weight 105 : 7'b1101001
    wire [10:0] n_0_1_po_5;
    assign n_0_1_po_5 = $unsigned(inp[23:20]) * $unsigned(7'b1101001);

    //accumulate positive/negative subproducts
    wire [12:0] n_0_1_sum_pos;
    assign n_0_1_sum_pos = n_0_1_po_0 + n_0_1_po_2 + n_0_1_po_3 + n_0_1_po_4 + n_0_1_po_5;
    wire [12:0] n_0_1_sum_neg;
    assign n_0_1_sum_neg = 8'b10110000 + n_0_1_po_1;
    wire signed [13:0] n_0_1_sum;
    assign n_0_1_sum = $signed({1'b0,n_0_1_sum_pos}) - $signed({1'b0,n_0_1_sum_neg});

    //relu
    wire [9:0] n_0_1, n_0_1_qrelu;
    DW01_satrnd #(13, 10, 1) USR_n_0_1 ( .din(n_0_1_sum[12:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_1_qrelu));
    assign n_0_1 = (n_0_1_sum<0) ? $unsigned({10{1'b0}}) : $unsigned(n_0_1_qrelu);

// layer: 0 - neuron: 2
    //weight 104 : 7'b1101000
    wire [10:0] n_0_2_po_0;
    assign n_0_2_po_0 = $unsigned(inp[3:0]) * $unsigned(7'b1101000);

    //weight abs(-51) : 6'b110011
    wire [9:0] n_0_2_po_1;
    assign n_0_2_po_1 = $unsigned(inp[7:4]) * $unsigned(6'b110011);

    //weight 18 : 5'b10010
    wire [8:0] n_0_2_po_2;
    assign n_0_2_po_2 = $unsigned(inp[11:8]) * $unsigned(5'b10010);

    //weight abs(-42) : 6'b101010
    wire [9:0] n_0_2_po_3;
    assign n_0_2_po_3 = $unsigned(inp[15:12]) * $unsigned(6'b101010);

    //weight abs(-18) : 5'b10010
    wire [8:0] n_0_2_po_4;
    assign n_0_2_po_4 = $unsigned(inp[19:16]) * $unsigned(5'b10010);

    //weight 127 : 7'b1111111
    wire [10:0] n_0_2_po_5;
    assign n_0_2_po_5 = $unsigned(inp[23:20]) * $unsigned(7'b1111111);

    //accumulate positive/negative subproducts
    wire [12:0] n_0_2_sum_pos;
    assign n_0_2_sum_pos = 9'b101101000 + n_0_2_po_0 + n_0_2_po_2 + n_0_2_po_5;
    wire [12:0] n_0_2_sum_neg;
    assign n_0_2_sum_neg = n_0_2_po_1 + n_0_2_po_3 + n_0_2_po_4;
    wire signed [13:0] n_0_2_sum;
    assign n_0_2_sum = $signed({1'b0,n_0_2_sum_pos}) - $signed({1'b0,n_0_2_sum_neg});

    //relu
    wire [9:0] n_0_2, n_0_2_qrelu;
    DW01_satrnd #(13, 10, 1) USR_n_0_2 ( .din(n_0_2_sum[12:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_2_qrelu));
    assign n_0_2 = (n_0_2_sum<0) ? $unsigned({10{1'b0}}) : $unsigned(n_0_2_qrelu);

// layer: 1 - neuron: 0
    //weight 127 : 7'b1111111
    wire [16:0] n_1_0_po_0;
    assign n_1_0_po_0 = $unsigned(n_0_0) * $unsigned(7'b1111111);

    //weight abs(-123) : 7'b1111011
    wire [16:0] n_1_0_po_1;
    assign n_1_0_po_1 = $unsigned(n_0_1) * $unsigned(7'b1111011);

    //weight abs(-112) : 7'b1110000
    wire [16:0] n_1_0_po_2;
    assign n_1_0_po_2 = $unsigned(n_0_2) * $unsigned(7'b1110000);

    //accumulate positive/negative subproducts
    wire [18:0] n_1_0_sum_pos;
    assign n_1_0_sum_pos = n_1_0_po_0;
    wire [18:0] n_1_0_sum_neg;
    assign n_1_0_sum_neg = 13'b1011010000000 + n_1_0_po_1 + n_1_0_po_2;
    wire signed [19:0] n_1_0_sum;
    assign n_1_0_sum = $signed({1'b0,n_1_0_sum_pos}) - $signed({1'b0,n_1_0_sum_neg});

    //linear
    wire signed [19:0] n_1_0;
    assign n_1_0 = n_1_0_sum;

// layer: 1 - neuron: 1
    //weight abs(-49) : 6'b110001
    wire [15:0] n_1_1_po_0;
    assign n_1_1_po_0 = $unsigned(n_0_0) * $unsigned(6'b110001);

    //weight 25 : 5'b11001
    wire [14:0] n_1_1_po_1;
    assign n_1_1_po_1 = $unsigned(n_0_1) * $unsigned(5'b11001);

    //weight 123 : 7'b1111011
    wire [16:0] n_1_1_po_2;
    assign n_1_1_po_2 = $unsigned(n_0_2) * $unsigned(7'b1111011);

    //accumulate positive/negative subproducts
    wire [17:0] n_1_1_sum_pos;
    assign n_1_1_sum_pos = n_1_1_po_1 + n_1_1_po_2;
    wire [17:0] n_1_1_sum_neg;
    assign n_1_1_sum_neg = 13'b1111110000000 + n_1_1_po_0;
    wire signed [18:0] n_1_1_sum;
    assign n_1_1_sum = $signed({1'b0,n_1_1_sum_pos}) - $signed({1'b0,n_1_1_sum_neg});

    //linear
    wire signed [18:0] n_1_1;
    assign n_1_1 = n_1_1_sum;

// layer: 1 - neuron: 2
    //weight 91 : 7'b1011011
    wire [16:0] n_1_2_po_0;
    assign n_1_2_po_0 = $unsigned(n_0_0) * $unsigned(7'b1011011);

    //weight 51 : 6'b110011
    wire [15:0] n_1_2_po_1;
    assign n_1_2_po_1 = $unsigned(n_0_1) * $unsigned(6'b110011);

    //weight abs(-128) : 8'b10000000
    wire [17:0] n_1_2_po_2;
    assign n_1_2_po_2 = $unsigned(n_0_2) * $unsigned(8'b10000000);

    //accumulate positive/negative subproducts
    wire [18:0] n_1_2_sum_pos;
    assign n_1_2_sum_pos = n_1_2_po_0 + n_1_2_po_1;
    wire [18:0] n_1_2_sum_neg;
    assign n_1_2_sum_neg = 10'b1000000000 + n_1_2_po_2;
    wire signed [19:0] n_1_2_sum;
    assign n_1_2_sum = $signed({1'b0,n_1_2_sum_pos}) - $signed({1'b0,n_1_2_sum_neg});

    //linear
    wire signed [19:0] n_1_2;
    assign n_1_2 = n_1_2_sum;

// argmax: 3 classes, need 2 bits
// argmax inp: n_1_0, n_1_1, n_1_2
    //comp level 0
    wire cmp_0_0;
    wire signed [19:0] argmax_val_0_0;
    wire [1:0] argmax_idx_0_0;
    assign {cmp_0_0} = ( n_1_0 >= n_1_1 );
    assign {argmax_val_0_0} = ( cmp_0_0 ) ? n_1_0 : n_1_1;
    assign {argmax_idx_0_0} = ( cmp_0_0 ) ? 2'b00 : 2'b01;

    //comp level 1
    wire cmp_1_0;
    wire signed [19:0] argmax_val_1_0;
    wire [1:0] argmax_idx_1_0;
    assign {cmp_1_0} = ( argmax_val_0_0 >= n_1_2 );
    assign {argmax_val_1_0} = ( cmp_1_0 ) ? argmax_val_0_0 : n_1_2;
    assign {argmax_idx_1_0} = ( cmp_1_0 ) ? argmax_idx_0_0 : 2'b10;

    assign out = argmax_idx_1_0;

endmodule
