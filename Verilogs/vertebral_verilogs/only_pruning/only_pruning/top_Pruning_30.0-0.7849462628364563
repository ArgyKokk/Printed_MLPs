//weights: [[[127, -71, 0, -41, 0, -128], [62, -121, 43, 80, 90, 114], [91, -62, 0, 0, 0, 127]], [[127, -121, -109], [0, 0, 108], [103, 0, -117]]]
//intercepts: [[127, -50, 61], [-82, -128, 16]]
module top (inp, out);
input [23:0] inp;
output [1:0] out;

// layer: 0 - neuron: 0
    //weight 127 : 7'b1111111
    wire [10:0] n_0_0_po_0;
    assign n_0_0_po_0 = $unsigned(inp[3:0]) * $unsigned(7'b1111111);

    //weight abs(-71) : 7'b1000111
    wire [10:0] n_0_0_po_1;
    assign n_0_0_po_1 = $unsigned(inp[7:4]) * $unsigned(7'b1000111);

    //weight 0 : skip
    //weight abs(-41) : 6'b101001
    wire [9:0] n_0_0_po_3;
    assign n_0_0_po_3 = $unsigned(inp[15:12]) * $unsigned(6'b101001);

    //weight 0 : skip
    //weight abs(-128) : 8'b10000000
    wire [11:0] n_0_0_po_5;
    assign n_0_0_po_5 = $unsigned(inp[23:20]) * $unsigned(8'b10000000);

    //accumulate positive/negative subproducts
    wire [12:0] n_0_0_sum_pos;
    assign n_0_0_sum_pos = 10'b1111111000 + n_0_0_po_0;
    wire [12:0] n_0_0_sum_neg;
    assign n_0_0_sum_neg = n_0_0_po_1 + n_0_0_po_3 + n_0_0_po_5;
    wire signed [13:0] n_0_0_sum;
    assign n_0_0_sum = $signed({1'b0,n_0_0_sum_pos}) - $signed({1'b0,n_0_0_sum_neg});

    //relu
    wire [9:0] n_0_0, n_0_0_qrelu;
    DW01_satrnd #(13, 10, 1) USR_n_0_0 ( .din(n_0_0_sum[12:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_0_qrelu));
    assign n_0_0 = (n_0_0_sum<0) ? $unsigned({10{1'b0}}) : $unsigned(n_0_0_qrelu);

// layer: 0 - neuron: 1
    //weight 62 : 6'b111110
    wire [9:0] n_0_1_po_0;
    assign n_0_1_po_0 = $unsigned(inp[3:0]) * $unsigned(6'b111110);

    //weight abs(-121) : 7'b1111001
    wire [10:0] n_0_1_po_1;
    assign n_0_1_po_1 = $unsigned(inp[7:4]) * $unsigned(7'b1111001);

    //weight 43 : 6'b101011
    wire [9:0] n_0_1_po_2;
    assign n_0_1_po_2 = $unsigned(inp[11:8]) * $unsigned(6'b101011);

    //weight 80 : 7'b1010000
    wire [10:0] n_0_1_po_3;
    assign n_0_1_po_3 = $unsigned(inp[15:12]) * $unsigned(7'b1010000);

    //weight 90 : 7'b1011010
    wire [10:0] n_0_1_po_4;
    assign n_0_1_po_4 = $unsigned(inp[19:16]) * $unsigned(7'b1011010);

    //weight 114 : 7'b1110010
    wire [10:0] n_0_1_po_5;
    assign n_0_1_po_5 = $unsigned(inp[23:20]) * $unsigned(7'b1110010);

    //accumulate positive/negative subproducts
    wire [12:0] n_0_1_sum_pos;
    assign n_0_1_sum_pos = n_0_1_po_0 + n_0_1_po_2 + n_0_1_po_3 + n_0_1_po_4 + n_0_1_po_5;
    wire [12:0] n_0_1_sum_neg;
    assign n_0_1_sum_neg = 9'b110010000 + n_0_1_po_1;
    wire signed [13:0] n_0_1_sum;
    assign n_0_1_sum = $signed({1'b0,n_0_1_sum_pos}) - $signed({1'b0,n_0_1_sum_neg});

    //relu
    wire [9:0] n_0_1, n_0_1_qrelu;
    DW01_satrnd #(13, 10, 1) USR_n_0_1 ( .din(n_0_1_sum[12:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_1_qrelu));
    assign n_0_1 = (n_0_1_sum<0) ? $unsigned({10{1'b0}}) : $unsigned(n_0_1_qrelu);

// layer: 0 - neuron: 2
    //weight 91 : 7'b1011011
    wire [10:0] n_0_2_po_0;
    assign n_0_2_po_0 = $unsigned(inp[3:0]) * $unsigned(7'b1011011);

    //weight abs(-62) : 6'b111110
    wire [9:0] n_0_2_po_1;
    assign n_0_2_po_1 = $unsigned(inp[7:4]) * $unsigned(6'b111110);

    //weight 0 : skip
    //weight 0 : skip
    //weight 0 : skip
    //weight 127 : 7'b1111111
    wire [10:0] n_0_2_po_5;
    assign n_0_2_po_5 = $unsigned(inp[23:20]) * $unsigned(7'b1111111);

    //accumulate positive/negative subproducts
    wire [12:0] n_0_2_sum_pos;
    assign n_0_2_sum_pos = 9'b111101000 + n_0_2_po_0 + n_0_2_po_5;
    wire [12:0] n_0_2_sum_neg;
    assign n_0_2_sum_neg = n_0_2_po_1;
    wire signed [13:0] n_0_2_sum;
    assign n_0_2_sum = $signed({1'b0,n_0_2_sum_pos}) - $signed({1'b0,n_0_2_sum_neg});

    //relu
    wire [9:0] n_0_2, n_0_2_qrelu;
    DW01_satrnd #(13, 10, 1) USR_n_0_2 ( .din(n_0_2_sum[12:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_2_qrelu));
    assign n_0_2 = (n_0_2_sum<0) ? $unsigned({10{1'b0}}) : $unsigned(n_0_2_qrelu);

// layer: 1 - neuron: 0
    //weight 127 : 7'b1111111
    wire [16:0] n_1_0_po_0;
    assign n_1_0_po_0 = $unsigned(n_0_0) * $unsigned(7'b1111111);

    //weight abs(-121) : 7'b1111001
    wire [16:0] n_1_0_po_1;
    assign n_1_0_po_1 = $unsigned(n_0_1) * $unsigned(7'b1111001);

    //weight abs(-109) : 7'b1101101
    wire [16:0] n_1_0_po_2;
    assign n_1_0_po_2 = $unsigned(n_0_2) * $unsigned(7'b1101101);

    //accumulate positive/negative subproducts
    wire [18:0] n_1_0_sum_pos;
    assign n_1_0_sum_pos = n_1_0_po_0;
    wire [18:0] n_1_0_sum_neg;
    assign n_1_0_sum_neg = 14'b10100100000000 + n_1_0_po_1 + n_1_0_po_2;
    wire signed [19:0] n_1_0_sum;
    assign n_1_0_sum = $signed({1'b0,n_1_0_sum_pos}) - $signed({1'b0,n_1_0_sum_neg});

    //linear
    wire signed [19:0] n_1_0;
    assign n_1_0 = n_1_0_sum;

// layer: 1 - neuron: 1
    //weight 0 : skip
    //weight 0 : skip
    //weight 108 : 7'b1101100
    wire [16:0] n_1_1_po_2;
    assign n_1_1_po_2 = $unsigned(n_0_2) * $unsigned(7'b1101100);

    //accumulate positive/negative subproducts
    wire [16:0] n_1_1_sum_pos;
    assign n_1_1_sum_pos = n_1_1_po_2;
    wire [16:0] n_1_1_sum_neg;
    assign n_1_1_sum_neg = 15'b100000000000000;
    wire signed [17:0] n_1_1_sum;
    assign n_1_1_sum = $signed({1'b0,n_1_1_sum_pos}) - $signed({1'b0,n_1_1_sum_neg});

    //linear
    wire signed [17:0] n_1_1;
    assign n_1_1 = n_1_1_sum;

// layer: 1 - neuron: 2
    //weight 103 : 7'b1100111
    wire [16:0] n_1_2_po_0;
    assign n_1_2_po_0 = $unsigned(n_0_0) * $unsigned(7'b1100111);

    //weight 0 : skip
    //weight abs(-117) : 7'b1110101
    wire [16:0] n_1_2_po_2;
    assign n_1_2_po_2 = $unsigned(n_0_2) * $unsigned(7'b1110101);

    //accumulate positive/negative subproducts
    wire [17:0] n_1_2_sum_pos;
    assign n_1_2_sum_pos = 12'b100000000000 + n_1_2_po_0;
    wire [17:0] n_1_2_sum_neg;
    assign n_1_2_sum_neg = n_1_2_po_2;
    wire signed [18:0] n_1_2_sum;
    assign n_1_2_sum = $signed({1'b0,n_1_2_sum_pos}) - $signed({1'b0,n_1_2_sum_neg});

    //linear
    wire signed [18:0] n_1_2;
    assign n_1_2 = n_1_2_sum;

// argmax: 3 classes, need 2 bits
// argmax inp: n_1_0, n_1_1, n_1_2
    //comp level 0
    wire cmp_0_0;
    wire signed [19:0] argmax_val_0_0;
    wire [1:0] argmax_idx_0_0;
    assign {cmp_0_0} = ( n_1_0 >= n_1_1 );
    assign {argmax_val_0_0} = ( cmp_0_0 ) ? n_1_0 : n_1_1;
    assign {argmax_idx_0_0} = ( cmp_0_0 ) ? 2'b00 : 2'b01;

    //comp level 1
    wire cmp_1_0;
    wire signed [19:0] argmax_val_1_0;
    wire [1:0] argmax_idx_1_0;
    assign {cmp_1_0} = ( argmax_val_0_0 >= n_1_2 );
    assign {argmax_val_1_0} = ( cmp_1_0 ) ? argmax_val_0_0 : n_1_2;
    assign {argmax_idx_1_0} = ( cmp_1_0 ) ? argmax_idx_0_0 : 2'b10;

    assign out = argmax_idx_1_0;

endmodule
