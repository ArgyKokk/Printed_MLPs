//weights: [[[7, -5, 0, -3, 0, -8], [4, -8, 2, 5, 6, 6], [6, -4, 0, -3, 0, 7]], [[3, -4, -3], [0, 0, 3], [3, 1, -4]]]
//intercepts: [[7, -7, 4], [0, -8, -2]]
module top (inp, out);
input [23:0] inp;
output [1:0] out;

// layer: 0 - neuron: 0
    //weight 7 : 3'b111
    wire [6:0] n_0_0_po_0;
    assign n_0_0_po_0 = $unsigned(inp[3:0]) * $unsigned(3'b111);

    //weight abs(-5) : 3'b101
    wire [6:0] n_0_0_po_1;
    assign n_0_0_po_1 = $unsigned(inp[7:4]) * $unsigned(3'b101);

    //weight 0 : skip
    //weight abs(-3) : 2'b11
    wire [5:0] n_0_0_po_3;
    assign n_0_0_po_3 = $unsigned(inp[15:12]) * $unsigned(2'b11);

    //weight 0 : skip
    //weight abs(-8) : 4'b1000
    wire [7:0] n_0_0_po_5;
    assign n_0_0_po_5 = $unsigned(inp[23:20]) * $unsigned(4'b1000);

    //accumulate positive/negative subproducts
    wire [8:0] n_0_0_sum_pos;
    assign n_0_0_sum_pos = 5'b11100 + n_0_0_po_0;
    wire [8:0] n_0_0_sum_neg;
    assign n_0_0_sum_neg = n_0_0_po_1 + n_0_0_po_3 + n_0_0_po_5;
    wire signed [9:0] n_0_0_sum;
    assign n_0_0_sum = $signed({1'b0,n_0_0_sum_pos}) - $signed({1'b0,n_0_0_sum_neg});

    //relu
    wire [4:0] n_0_0, n_0_0_qrelu;
    DW01_satrnd #(9, 5, 1) USR_n_0_0 ( .din(n_0_0_sum[8:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_0_qrelu));
    assign n_0_0 = (n_0_0_sum<0) ? $unsigned({5{1'b0}}) : $unsigned(n_0_0_qrelu);

// layer: 0 - neuron: 1
    //weight 4 : 3'b100
    wire [6:0] n_0_1_po_0;
    assign n_0_1_po_0 = $unsigned(inp[3:0]) * $unsigned(3'b100);

    //weight abs(-8) : 4'b1000
    wire [7:0] n_0_1_po_1;
    assign n_0_1_po_1 = $unsigned(inp[7:4]) * $unsigned(4'b1000);

    //weight 2 : 2'b10
    wire [5:0] n_0_1_po_2;
    assign n_0_1_po_2 = $unsigned(inp[11:8]) * $unsigned(2'b10);

    //weight 5 : 3'b101
    wire [6:0] n_0_1_po_3;
    assign n_0_1_po_3 = $unsigned(inp[15:12]) * $unsigned(3'b101);

    //weight 6 : 3'b110
    wire [6:0] n_0_1_po_4;
    assign n_0_1_po_4 = $unsigned(inp[19:16]) * $unsigned(3'b110);

    //weight 6 : 3'b110
    wire [6:0] n_0_1_po_5;
    assign n_0_1_po_5 = $unsigned(inp[23:20]) * $unsigned(3'b110);

    //accumulate positive/negative subproducts
    wire [9:0] n_0_1_sum_pos;
    assign n_0_1_sum_pos = n_0_1_po_0 + n_0_1_po_2 + n_0_1_po_3 + n_0_1_po_4 + n_0_1_po_5;
    wire [9:0] n_0_1_sum_neg;
    assign n_0_1_sum_neg = 5'b11100 + n_0_1_po_1;
    wire signed [10:0] n_0_1_sum;
    assign n_0_1_sum = $signed({1'b0,n_0_1_sum_pos}) - $signed({1'b0,n_0_1_sum_neg});

    //relu
    wire [4:0] n_0_1, n_0_1_qrelu;
    DW01_satrnd #(10, 5, 1) USR_n_0_1 ( .din(n_0_1_sum[9:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_1_qrelu));
    assign n_0_1 = (n_0_1_sum<0) ? $unsigned({5{1'b0}}) : $unsigned(n_0_1_qrelu);

// layer: 0 - neuron: 2
    //weight 6 : 3'b110
    wire [6:0] n_0_2_po_0;
    assign n_0_2_po_0 = $unsigned(inp[3:0]) * $unsigned(3'b110);

    //weight abs(-4) : 3'b100
    wire [6:0] n_0_2_po_1;
    assign n_0_2_po_1 = $unsigned(inp[7:4]) * $unsigned(3'b100);

    //weight 0 : skip
    //weight abs(-3) : 2'b11
    wire [5:0] n_0_2_po_3;
    //merging with node 0
    assign n_0_2_po_3 = n_0_0_po_3;

    //weight 0 : skip
    //weight 7 : 3'b111
    wire [6:0] n_0_2_po_5;
    assign n_0_2_po_5 = $unsigned(inp[23:20]) * $unsigned(3'b111);

    //accumulate positive/negative subproducts
    wire [8:0] n_0_2_sum_pos;
    assign n_0_2_sum_pos = 5'b10000 + n_0_2_po_0 + n_0_2_po_5;
    wire [8:0] n_0_2_sum_neg;
    assign n_0_2_sum_neg = n_0_2_po_1 + n_0_2_po_3;
    wire signed [9:0] n_0_2_sum;
    assign n_0_2_sum = $signed({1'b0,n_0_2_sum_pos}) - $signed({1'b0,n_0_2_sum_neg});

    //relu
    wire [4:0] n_0_2, n_0_2_qrelu;
    DW01_satrnd #(9, 5, 1) USR_n_0_2 ( .din(n_0_2_sum[8:0]), .tc(1'b0), .rnd(1'b0), .ov(), .sat(1'b1), .dout(n_0_2_qrelu));
    assign n_0_2 = (n_0_2_sum<0) ? $unsigned({5{1'b0}}) : $unsigned(n_0_2_qrelu);

// layer: 1 - neuron: 0
    //weight 3 : 2'b11
    wire [6:0] n_1_0_po_0;
    assign n_1_0_po_0 = $unsigned(n_0_0) * $unsigned(2'b11);

    //weight abs(-4) : 3'b100
    wire [7:0] n_1_0_po_1;
    assign n_1_0_po_1 = $unsigned(n_0_1) * $unsigned(3'b100);

    //weight abs(-3) : 2'b11
    wire [6:0] n_1_0_po_2;
    assign n_1_0_po_2 = $unsigned(n_0_2) * $unsigned(2'b11);

    //accumulate positive/negative subproducts
    wire [8:0] n_1_0_sum_pos;
    assign n_1_0_sum_pos = n_1_0_po_0;
    wire [8:0] n_1_0_sum_neg;
    assign n_1_0_sum_neg = n_1_0_po_1 + n_1_0_po_2;
    wire signed [9:0] n_1_0_sum;
    assign n_1_0_sum = $signed({1'b0,n_1_0_sum_pos}) - $signed({1'b0,n_1_0_sum_neg});

    //linear
    wire signed [9:0] n_1_0;
    assign n_1_0 = n_1_0_sum;

// layer: 1 - neuron: 1
    //weight 0 : skip
    //weight 0 : skip
    //weight 3 : 2'b11
    wire [6:0] n_1_1_po_2;
    //merging with node 0
    assign n_1_1_po_2 = n_1_0_po_2;

    //accumulate positive/negative subproducts
    wire [6:0] n_1_1_sum_pos;
    assign n_1_1_sum_pos = n_1_1_po_2;
    wire [6:0] n_1_1_sum_neg;
    assign n_1_1_sum_neg = 5'b10000;
    wire signed [7:0] n_1_1_sum;
    assign n_1_1_sum = $signed({1'b0,n_1_1_sum_pos}) - $signed({1'b0,n_1_1_sum_neg});

    //linear
    wire signed [7:0] n_1_1;
    assign n_1_1 = n_1_1_sum;

// layer: 1 - neuron: 2
    //weight 3 : 2'b11
    wire [6:0] n_1_2_po_0;
    //merging with node 0
    assign n_1_2_po_0 = n_1_0_po_0;

    //weight 1 : 1'b1
    wire [5:0] n_1_2_po_1;
    assign n_1_2_po_1 = $unsigned(n_0_1) * $unsigned(1'b1);

    //weight abs(-4) : 3'b100
    wire [7:0] n_1_2_po_2;
    assign n_1_2_po_2 = $unsigned(n_0_2) * $unsigned(3'b100);

    //accumulate positive/negative subproducts
    wire [8:0] n_1_2_sum_pos;
    assign n_1_2_sum_pos = n_1_2_po_0 + n_1_2_po_1;
    wire [8:0] n_1_2_sum_neg;
    assign n_1_2_sum_neg = 3'b100 + n_1_2_po_2;
    wire signed [9:0] n_1_2_sum;
    assign n_1_2_sum = $signed({1'b0,n_1_2_sum_pos}) - $signed({1'b0,n_1_2_sum_neg});

    //linear
    wire signed [9:0] n_1_2;
    assign n_1_2 = n_1_2_sum;

// argmax: 3 classes, need 2 bits
// argmax inp: n_1_0, n_1_1, n_1_2
    //comp level 0
    wire cmp_0_0;
    wire signed [9:0] argmax_val_0_0;
    wire [1:0] argmax_idx_0_0;
    assign {cmp_0_0} = ( n_1_0 >= n_1_1 );
    assign {argmax_val_0_0} = ( cmp_0_0 ) ? n_1_0 : n_1_1;
    assign {argmax_idx_0_0} = ( cmp_0_0 ) ? 2'b00 : 2'b01;

    //comp level 1
    wire cmp_1_0;
    wire signed [9:0] argmax_val_1_0;
    wire [1:0] argmax_idx_1_0;
    assign {cmp_1_0} = ( argmax_val_0_0 >= n_1_2 );
    assign {argmax_val_1_0} = ( cmp_1_0 ) ? argmax_val_0_0 : n_1_2;
    assign {argmax_idx_1_0} = ( cmp_1_0 ) ? argmax_idx_0_0 : 2'b10;

    assign out = argmax_idx_1_0;

endmodule
